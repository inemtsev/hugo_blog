<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ORM on EventsLooped</title><link>https://www.eventslooped.com/tags/orm/</link><description>Recent content in ORM on EventsLooped</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; Ilya Nemtsev 2019</copyright><lastBuildDate>Sun, 29 Dec 2019 23:57:36 +0700</lastBuildDate><atom:link href="https://www.eventslooped.com/tags/orm/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang Microservices Part 2 - PostgreSQL with gorm</title><link>https://www.eventslooped.com/posts/golang-microservices-adding-postgresql/</link><pubDate>Sun, 29 Dec 2019 23:57:36 +0700</pubDate><guid>https://www.eventslooped.com/posts/golang-microservices-adding-postgresql/</guid><description>Setting up GORM Continuing from the app we created in Part 1
PostgreSQL is one of the most popular database choices today because it is free and has most of the features that the big guns like Microsoft SQL Server and Oracle offer. To connect our microservice to PostgreSQL, we can simplify our life by using an ORM for GO called GORM&amp;hellip; GO-ORM get it?
via GIPHY
Let's upgrade the gRPC microservice we created in Part 1 to use an actual database instead of just cache.</description></item></channel></rss>