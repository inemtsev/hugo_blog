<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on EventsLooped</title><link>https://www.eventslooped.com/tags/golang/</link><description>Recent content in golang on EventsLooped</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; Ilya Nemtsev 2019</copyright><lastBuildDate>Sat, 16 May 2020 15:52:15 +0700</lastBuildDate><atom:link href="https://www.eventslooped.com/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Interview Question #2 - Write a function to check if a string is a palindrome</title><link>https://www.eventslooped.com/posts/interview-question-in-go-2/</link><pubDate>Sat, 16 May 2020 15:52:15 +0700</pubDate><guid>https://www.eventslooped.com/posts/interview-question-in-go-2/</guid><description>This question is very common on interviews, and while fairly straightforward, plenty developers mess it up on the interview.
What is a palindrome? Webster dictionary defines it as a word, sentence or number that reads the same forwards and backwards. Some examples are: dad, 1881, abba.
There are a few approaches to solving this problem, we can reverse the array of characters and compare the resulting string for example. The more efficient way of doing this is to compare the characters from the beginning and from the end one-by-one.</description></item><item><title>Go Interview Question #1 - Find all the prime numbers less than or equal to 'n'</title><link>https://www.eventslooped.com/posts/interview-question-in-go-1/</link><pubDate>Wed, 06 May 2020 13:10:43 +0700</pubDate><guid>https://www.eventslooped.com/posts/interview-question-in-go-1/</guid><description>As a means of keeping my logic sharp and helping others prepare for Go interviews I decided to release a solved interview question every week or so.
In this post, let&amp;rsquo;s write a function in Go that generates us all the primes at or below a specific integer.
To even attempt this question, we need to know the exact definition of a prime number. According to Wolfram, A prime number is a positive integer p&amp;gt;1 that has no positive integer divisors other than 1 and p itself.</description></item><item><title>Chunked File Upload using TypeScript, React, and Go</title><link>https://www.eventslooped.com/posts/chunked-file-upload-typescript-react-go/</link><pubDate>Wed, 15 Apr 2020 19:30:11 +0700</pubDate><guid>https://www.eventslooped.com/posts/chunked-file-upload-typescript-react-go/</guid><description>Why you may want to chunk files? The biggest reason for me to upload files in chunks, is because I want to upload very large files; pictures, videos, whatever&amp;hellip; This means, I want to know the status of the upload as it progresses and if I can&amp;rsquo;t finish the upload now, I want to be able to pause, go to my favourite coffee shop and continue on there.
Let&amp;rsquo;s build a simple app using no additional javascript libraries!</description></item><item><title>Golang Microservices Part 2 - PostgreSQL with gorm</title><link>https://www.eventslooped.com/posts/golang-microservices-adding-postgresql/</link><pubDate>Sun, 29 Dec 2019 23:57:36 +0700</pubDate><guid>https://www.eventslooped.com/posts/golang-microservices-adding-postgresql/</guid><description>Setting up GORM Continuing from the app we created in Part 1
PostgreSQL is one of the most popular database choices today because it is free and has most of the features that the big guns like Microsoft SQL Server and Oracle offer. To connect our microservice to PostgreSQL, we can simplify our life by using an ORM for GO called GORM&amp;hellip; GO-ORM get it?
via GIPHY
Let's upgrade the gRPC microservice we created in Part 1 to use an actual database instead of just cache.</description></item><item><title>Golang Microservices Part 1 - gRPC Communication</title><link>https://www.eventslooped.com/posts/golang-microservices-grpc-communication/</link><pubDate>Fri, 29 Nov 2019 14:55:29 +0700</pubDate><guid>https://www.eventslooped.com/posts/golang-microservices-grpc-communication/</guid><description>Summary - Setting up gRPC communication gRPC is a modern, highly-efficient method of communication between systems built by Google. gRPC uses the new and efficient HTTP/2 network protocol as well Google&amp;rsquo;s Protocol Buffers (Protobuf) method of serialization which allows for more light-weight and predictable communication. Protocol Buffers can be used with any technology stack out there; code can be generated from the .proto file for nearly every programming language available.</description></item><item><title>KrakenD: Writing Plugins using Golang</title><link>https://www.eventslooped.com/posts/krakend-writing-plugins/</link><pubDate>Sat, 19 Oct 2019 18:59:02 +0700</pubDate><guid>https://www.eventslooped.com/posts/krakend-writing-plugins/</guid><description>Summary KrakenD has caught my attention as a Gateway solution because of its claim at incredible performance and extensibility. It is Open Source and can be tailored to your needs or can be extended in a convenient way with its support for Golang Plugins.
Plugin, what? Go plugins are a fairly new addition to Golang (support starting with Go 1.8), but they provide a very innovative way to add functionality to a Go application.</description></item><item><title>Use Golang to Upload Files to Azure Blob Storage</title><link>https://www.eventslooped.com/posts/use-golang-to-upload-files-to-azure-blob-storage/</link><pubDate>Sun, 04 Aug 2019 17:33:01 +0700</pubDate><guid>https://www.eventslooped.com/posts/use-golang-to-upload-files-to-azure-blob-storage/</guid><description>If you are enjoying Go and its community as much as myself but have been using the Azure Cloud Platform for some time already, you will probably want to use Azure Blob Storage at some point. In that case, this blog post is for you.
You will need: The first thing you need to do is make sure you set up your blob storage account in Azure Portal and create a blob container.</description></item><item><title>Make Multiple Api Calls At The Same Time With GoRoutines</title><link>https://www.eventslooped.com/posts/golang-make-multiple-api-calls/</link><pubDate>Mon, 03 Jun 2019 21:16:17 +0700</pubDate><guid>https://www.eventslooped.com/posts/golang-make-multiple-api-calls/</guid><description>Golang is efficient, very efficient. Much of this efficiency is attributed to its unique abstractions when dealing with concurrency. Java for example, maps its threads to OS threads, while Go uses its own goroutines scheduler to further abstract its lightweight goroutines from OS threads. In short, Golang is very frugal with how it uses OS threads; if a goroutine becomes blocked, Go&amp;rsquo;s scheduler will switch in another goroutine in its place to keep the thread busy as much as possible.</description></item></channel></rss>