<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Events Looped</title>
    <link>https://www.eventslooped.com/</link>
    <description>Recent content on Events Looped</description>
    <generator>Hugo - gohugo.io</generator>
    <language>en</language>
    <contact>eventslooped@gmail.com</contact>
    <copyright>&copy; Ilya Nemtsev 2017</copyright>
    
        <atom:link href="https://www.eventslooped.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Chunked File Upload using TypeScript, React, and Go</title>
      <link>https://www.eventslooped.com/posts/chunked-file-upload-typescript-react-go/</link>
      <pubDate>Wed, 15 Apr 2020 19:30:11 +0700</pubDate>
      <author>Ilya Nemtsev</author>
      <guid>https://www.eventslooped.com/posts/chunked-file-upload-typescript-react-go/</guid>
      <description></description>
      
      <content>

&lt;h3 id=&#34;summary-why-you-may-want-to-chunk-files&#34;&gt;Summary - Why you may want to chunk files?&lt;/h3&gt;

&lt;p&gt;The biggest reason for me to upload files in chunks, is because I want to upload very large files; pictures, videos, whatever&amp;hellip; This means, I want to know the status of the upload as it progresses and if I can&amp;rsquo;t finish the upload now, I want to be able to pause, go to my favourite coffee shop and continue on there.&lt;/p&gt;

&lt;h3 id=&#34;let-s-build-a-simple-app-using-no-additional-javascript-libraries&#34;&gt;Let&amp;rsquo;s build a simple app using no additional javascript libraries!&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://aqzodowgen.cloudimg.io/bound/800x600/n/https://www.eventslooped.com/posts/img/chunked-file-upload-typescript-react-go/charisse-kenion-chunked-chocolate.jpg&#34; alt=&#34;chunky chocolate, yum yum&#34;/&gt;
&lt;a style=&#34;background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &amp;quot;San Francisco&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Ubuntu, Roboto, Noto, &amp;quot;Segoe UI&amp;quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px&#34; href=&#34;https://unsplash.com/@charissek?utm_medium=referral&amp;amp;utm_campaign=photographer-credit&amp;amp;utm_content=creditBadge&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; title=&#34;Download free do whatever you want high-resolution photos from Charisse Kenion&#34;&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; style=&#34;height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white&#34; viewBox=&#34;0 0 32 32&#34;&gt;&lt;title&gt;unsplash-logo&lt;/title&gt;&lt;path d=&#34;M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;Charisse Kenion&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To upload a file in chunks, we need to make our browser/client aware of the progress of the file upload. So, most of the logic for the chunking process will live on the client-side.
Let&amp;rsquo;s start with a simple React component that currently has no logic but has a form that allows us to select multiple files.&lt;/p&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/inemtsev/a45daa46fbdcdd6f80a65eed693a0689.js?file=uploadMediaComponent0.tsx&#34;&gt;&lt;/script&gt;

&lt;p&gt;Let&amp;rsquo;s create a class that will keep track of all the details about the file and its progress; we will also put all the methods we need inside.&lt;/p&gt;

&lt;p&gt;&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/inemtsev/a45daa46fbdcdd6f80a65eed693a0689.js?file=FileToUpload0.ts&#34;&gt;&lt;/script&gt;
What&amp;rsquo;s inside? &lt;strong&gt;chunkSize&lt;/strong&gt; is the size of each chunk you wish to send to the server. &lt;strong&gt;uploadUrl&lt;/strong&gt; is the path to your server-side endpoint (more on that later). &lt;strong&gt;file&lt;/strong&gt; simply refers to the file you have selected to upload. Getting to where all the magic happens, &lt;strong&gt;currentChunkStartByte&lt;/strong&gt; is where we keep track of where the starting point of the current chunk is located. &lt;strong&gt;currentChunkFinalByte&lt;/strong&gt; is where we keep track of the location of the final byte of the current chunk.&lt;/p&gt;

&lt;p&gt;Inside the constructor we instantiate the browser built-in &lt;strong&gt;XmlHttpRequest&lt;/strong&gt; class and set the Mime Type to &lt;strong&gt;application/octet-stream&lt;/strong&gt;, which simply refers to generic binary data. &lt;strong&gt;currentChunkFinalByte&lt;/strong&gt; is set to either the chunkSize or the file size, whichever is smaller. This is to avoid chunking of small files.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s add the method that will do all the uploading.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span class=&#34;nx&#34;&gt;uploadFile() {&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FileToUpload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;uploadUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chunk&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;Blob&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currentChunkStartByte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currentChunkFinalByte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// split the file according to the boundaries
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setRequestHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Range&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`bytes &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currentChunkStartByte&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currentChunkFinalByte&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;remainingBytes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currentChunkFinalByte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currentChunkFinalByte&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Yay, upload completed! Chao!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;remainingBytes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FileToUpload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;chunkSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;// if the remaining chunk is smaller than the chunk size we defined
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currentChunkStartByte&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currentChunkFinalByte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currentChunkFinalByte&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currentChunkStartByte&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;remainingBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;// keep chunking
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currentChunkStartByte&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currentChunkFinalByte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currentChunkFinalByte&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currentChunkStartByte&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FileToUpload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;chunkSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

            &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;uploadFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;formData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FormData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;formData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chunk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;formData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// send it now!
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
A few things to highlight here. &lt;strong&gt;Content-Range&lt;/strong&gt; needs to be set, we will use this on the server to determine when to stop adding to the file. &lt;strong&gt;this.request.onload&lt;/strong&gt; is a callback which is called whenever a transaction by XmlHttpRequest is completed. &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onload&#34;&gt;More on XmlHttpRequest.onload here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Putting these together, your &lt;strong&gt;FileToUpload.ts&lt;/strong&gt; will look like this.
&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/inemtsev/a45daa46fbdcdd6f80a65eed693a0689.js?file=FileToUpload.ts&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;let-s-use-what-we-created-inside-our-component&#34;&gt;Let&amp;rsquo;s use what we created inside our component&lt;/h3&gt;

&lt;p&gt;Now, we have a class to represent the file to be uploaded. We can instantiate this class as many times as needed inside the component. The resulting component looks like this.&lt;/p&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/inemtsev/a45daa46fbdcdd6f80a65eed693a0689.js?file=uploadMediaComponent.tsx&#34;&gt;&lt;/script&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3 id=&#34;our-client-side-code-is-now-sending-chunks-let-s-prepare-the-backend-using-go-and-gin&#34;&gt;Our client-side code is now sending chunks, let&amp;rsquo;s prepare the backend using Go and Gin&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://aqzodowgen.cloudimg.io/bound/800x600/n/https://www.eventslooped.com/posts/img/chunked-file-upload-typescript-react-go/sven-brandsma-chainsaw.jpg&#34; alt=&#34;vroom vroom&#34;/&gt;
&lt;a style=&#34;background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &amp;quot;San Francisco&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Ubuntu, Roboto, Noto, &amp;quot;Segoe UI&amp;quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px&#34; href=&#34;https://unsplash.com/@seffen99?utm_medium=referral&amp;amp;utm_campaign=photographer-credit&amp;amp;utm_content=creditBadge&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; title=&#34;Download free do whatever you want high-resolution photos from Sven Brandsma&#34;&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; style=&#34;height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white&#34; viewBox=&#34;0 0 32 32&#34;&gt;&lt;title&gt;unsplash-logo&lt;/title&gt;&lt;path d=&#34;M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;Sven Brandsma&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Starting with the typical Gin setup, we add one endpoint &lt;strong&gt;/photo&lt;/strong&gt;&lt;/p&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/inemtsev/a45daa46fbdcdd6f80a65eed693a0689.js?file=main0.go&#34;&gt;&lt;/script&gt;

&lt;p&gt;Then we handle the request:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;uploadFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;File&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;FormFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;OpenFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;O_APPEND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;O_CREATE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;O_RDWR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ModeAppend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Error creating file on the filesystem: &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Error during chunk write:&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;isFileUploadCompleted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nf&#34;&gt;uploadToGoogle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Error closing the file, I/O problem?&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Remove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Could not delete file %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The logic here is fairly straightforward:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the file or create if not there. &lt;strong&gt;os.O_APPEND&lt;/strong&gt; tells the OS that writes append to the file, so there is no need to offset to the end of the file. &lt;strong&gt;os.O_RDWR&lt;/strong&gt; opens the file for both reads and writes. &lt;strong&gt;os.ModeAppend&lt;/strong&gt; only allows writing via appending to the file.&lt;/li&gt;
&lt;li&gt;Then, we write/append the chunk to the file.&lt;/li&gt;
&lt;li&gt;We check if the file upload is completed. We do this by checking the range of bytes in the headers.&lt;/li&gt;
&lt;li&gt;Finally, we upload the file to Google Cloud.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To check that the file is finished uploading, we parse the &lt;strong&gt;Content-Range&lt;/strong&gt; header we sent from the browser.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;isFileUploadCompleted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;contentRangeHeader&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Content-Range&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;rangeAndSize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;contentRangeHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;rangeParts&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;rangeAndSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;rangeMax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strconv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Atoi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;rangeParts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Could not parse range max from header&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;fileSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strconv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Atoi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;rangeAndSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Could not parse file size from header&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fileSize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rangeMax&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The upload to the cloud here is GCP specific, but I will summarize it here if anybody needs it:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a bucket under &lt;strong&gt;Storage&lt;/strong&gt; in &lt;a href=&#34;https://console.cloud.google.com&#34;&gt;Google Cloud Console&lt;/a&gt;. I used Uniform Access Control, but if you need finer access control you can choose the other option.
&lt;p&gt;&lt;img src=&#34;https://www.eventslooped.com/posts/img/chunked-file-upload-typescript-react-go/gcp-storage.png&#34; alt=&#34;GCP Storage&#34;/&gt;&lt;/p&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a &lt;strong&gt;service account&lt;/strong&gt; to allow access to your resource. This will allow you to generate a json file which stores your credentials. Put this file somewhere in your filesystem and create an environmental variable GOOGLE_APPLICATION_CREDENTIALS to point to this json file. Google provides some instructions &lt;a href=&#34;https://cloud.google.com/docs/authentication/production#linux-or-macos&#34;&gt;here&lt;/a&gt;.
I provide my own simple instructions for Windows &lt;a href=&#34;https://www.eventslooped.com/posts/img/chunked-file-upload-typescript-react-go/gcp-set-service-account-path.png&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use code like this to upload your file.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;uploadToGoogle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;creds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;isFound&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;LookupEnv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;GOOGLE_APPLICATION_CREDENTIALS&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isFound&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;GCP environment variable is not set&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;creds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;GCP environment variable is empty&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bucketName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;el-my-gallery&amp;#34;&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;storage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Error creating client: &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;bucket&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Bucket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bucketName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bucket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%v is the upload filename&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Seek&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SeekStart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Error during GCP upload:&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%v bytes written to Cloud&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A few things to mention here. &lt;strong&gt;bucketName&lt;/strong&gt; is the name of the bucket you created in step 1. If you forget to close your writer, the upload will still run successfully, but the file will not show up in Google Storage.
&lt;strong&gt;f.Seek(0, io.SeekStart)&lt;/strong&gt; is needed to rewind the reader to the beginning, because we just finished writing to the end of the file.&lt;/p&gt;

&lt;h3 id=&#34;let-s-test&#34;&gt;Let&amp;rsquo;s test!&lt;/h3&gt;

&lt;p&gt;&lt;p&gt;Submit the form with a few files.&lt;/p&gt;
&lt;img src=&#34;https://www.eventslooped.com/posts/img/chunked-file-upload-typescript-react-go/upload-test1.png&#34; alt=&#34;client-side test&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;Golang console output:&lt;/p&gt;
&lt;img src=&#34;https://www.eventslooped.com/posts/img/chunked-file-upload-typescript-react-go/upload-test2.png&#34; alt=&#34;server-side test&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;Google Cloud Platform result.&lt;/p&gt;
&lt;img src=&#34;https://www.eventslooped.com/posts/img/chunked-file-upload-typescript-react-go/upload-test3.png&#34; alt=&#34;GCP storage result&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;Great everything worked :)&lt;/p&gt;
&lt;img src=&#34;https://aqzodowgen.cloudimg.io/bound/800x600/n/https://www.eventslooped.com/posts/img/chunked-file-upload-typescript-react-go/viktor-talashuk-cabin.jpg&#34; alt=&#34;Look what we made!&#34;/&gt;
&lt;a style=&#34;background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &amp;quot;San Francisco&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Ubuntu, Roboto, Noto, &amp;quot;Segoe UI&amp;quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px&#34; href=&#34;https://unsplash.com/@viktortalashuk?utm_medium=referral&amp;amp;utm_campaign=photographer-credit&amp;amp;utm_content=creditBadge&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; title=&#34;Download free do whatever you want high-resolution photos from Viktor Talashuk&#34;&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; style=&#34;height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white&#34; viewBox=&#34;0 0 32 32&#34;&gt;&lt;title&gt;unsplash-logo&lt;/title&gt;&lt;path d=&#34;M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;Viktor Talashuk&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;&lt;p&gt;I think this solution worked out quite well, but there are some things to consider. When using this solution in production, there is a small chance of filename collision; I recommend adding a unique Guid to the name or a userID in multi-tenancy solutions. &lt;/p&gt;
&lt;p&gt; Initially I tried to build this app using a more efficient approach, &lt;em&gt;without saving the file to the filesystem&lt;/em&gt; and appending each chunk to Google Cloud directly as it came in. Unfortunately, I ran into a GCP limitation here. At the time of writing, the maximum allowed update rate of any 1 file is 1 per second. Anything above this rate fails to upload. Therefore, I had to fall back to using the filesystem to put the chunks together.&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Golang Microservices Part 2 - PostgreSQL with gorm</title>
      <link>https://www.eventslooped.com/posts/golang-microservices-adding-postgresql/</link>
      <pubDate>Sun, 29 Dec 2019 23:57:36 +0700</pubDate>
      <author>Ilya Nemtsev</author>
      <guid>https://www.eventslooped.com/posts/golang-microservices-adding-postgresql/</guid>
      <description></description>
      
      <content>

&lt;h3 id=&#34;summary-setting-up-gorm&#34;&gt;Summary - Setting up GORM&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.eventslooped.com/posts/golang-microservices-grpc-communication&#34;&gt;Continuing from the app we created in Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PostgreSQL is one of the most popular database choices today because it is free and has most of the features that the big guns like Microsoft SQL Server and Oracle offer. To connect our microservice to PostgreSQL, we can simplify our life by using an ORM for GO called &lt;a href=&#34;https://gorm.io/&#34;&gt;GORM&lt;/a&gt;&amp;hellip; GO-ORM get it?&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;https://giphy.com/embed/fGRLn3m6XvmHeLNOzn&#34; width=&#34;480&#34; height=&#34;480&#34; frameBorder=&#34;0&#34; class=&#34;giphy-embed&#34; allowFullScreen&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;https://giphy.com/gifs/HallmarkChannel-fGRLn3m6XvmHeLNOzn&#34;&gt;via GIPHY&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Let&#39;s upgrade the gRPC microservice we created in Part 1 to use an actual database instead of just cache. &lt;/p&gt;

&lt;h3 id=&#34;first-let-s-create-our-persistence-model&#34;&gt;First, let&amp;rsquo;s create our persistence model&lt;/h3&gt;

&lt;p&gt;We will need to install the &lt;strong&gt;github.com/jinzhu/gorm&lt;/strong&gt; package. So run:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;go get github.com/jinzhu/gorm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;strong&gt;BasketballPlayer&lt;/strong&gt; model contains all of the data &lt;em&gt;we&lt;/em&gt; want to persist. For things like ID and other technicallities we can embed another type, let&amp;rsquo;s call it &lt;strong&gt;BasePersistenceModel&lt;/strong&gt;. You are free to use the default gorm.Model, but you will get several columns you may or may not need like &lt;em&gt;updated_at&lt;/em&gt;, &lt;em&gt;created_at&lt;/em&gt; and &lt;em&gt;deleted_at&lt;/em&gt;. You will also not be able to change the type of the column ID. This is why I like to create my own base model.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;BasePersistenceModel&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;ID&lt;/span&gt;	&lt;span class=&#34;kt&#34;&gt;uint64&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`gorm:&amp;#34;type:int;primary_key&amp;#34;`&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;BasketballPlayer&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;BasePersistenceModel&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//gorm.Model can be used if you don&amp;#39;t mind ID being an integer
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;FirstName&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;LastName&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Age&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;PhotoUrl&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;PointsPerGame&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;AssistsPerGame&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;ReboundsPerGame&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You may ask, why &lt;strong&gt;int32&lt;/strong&gt; is used here instead of the default &lt;strong&gt;int&lt;/strong&gt;? Simply, because our generated gRPC model uses int32 and I did not feel like doing any conversion. &lt;a href=&#34;https://stackoverflow.com/questions/21491488/what-is-the-difference-between-int-and-int64-in-go&#34;&gt;What is the difference?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have a small problem here, our &lt;em&gt;gRPC model&lt;/em&gt; is not the same as our &lt;em&gt;persistence model&lt;/em&gt;. Therefore, we will need to be able to convert between these two. Let&amp;rsquo;s add two methods to help us do this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;em&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;BasketballPlayer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetgRPCModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;basketBallPlayer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Player&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;basketBallPlayer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;Id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;                   &lt;span class=&#34;nx&#34;&gt;strconv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;FormatUint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;FirstName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;            &lt;span class=&#34;nx&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FirstName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;LastName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;             &lt;span class=&#34;nx&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LastName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;Age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;                  &lt;span class=&#34;nx&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;PhotoUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;             &lt;span class=&#34;nx&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PhotoUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;PointsPerGame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PointsPerGame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;AssistsPerGame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;       &lt;span class=&#34;nx&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;AssistsPerGame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;ReboundsPerGame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ReboundsPerGame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;em&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;BasketballPlayer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;From&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gRPCModel&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;basketBallPlayer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strconv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ParseUint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gRPCModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;incorrect ID from gRPC&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

		&lt;span class=&#34;nx&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ID&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;u&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FirstName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gRPCModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FirstName&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LastName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gRPCModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LastName&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Age&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gRPCModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Age&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PhotoUrl&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gRPCModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PhotoUrl&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PointsPerGame&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gRPCModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PointsPerGame&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;AssistsPerGame&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gRPCModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;AssistsPerGame&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ReboundsPerGame&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gRPCModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ReboundsPerGame&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Putting this all together, we have BasketballPlayer.go below, which we can put in our &lt;strong&gt;models folder&lt;/strong&gt;:&lt;/p&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/inemtsev/57cedc59988e2430bd28ad729367251b.js?file=BasketballPlayer.go&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;finally-let-s-update-our-main-go&#34;&gt;Finally, let&amp;rsquo;s update our main.go&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, we need to add proper package references to &lt;strong&gt;main.go&lt;/strong&gt;. Let&amp;rsquo;s the following:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;github.com/jinzhu/gorm&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;github.com/jinzhu/gorm/dialects/postgres&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The second line adds support for the database of your choosing. Don&amp;rsquo;t forget to add it, or you will get a cryptic error that isn&amp;rsquo;t easy to understand. &lt;a href=&#34;http://gorm.io/docs/connecting_to_the_database.html&#34;&gt;Here you will find a list of supported databases by gorm.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;, we need to add add a few package-level variables and a way to initialize them:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gorm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DB&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dbPath&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;host=34.84.26.219 user=postgres password=somecoolpasswordhere&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gorm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;postgres&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dbPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;failed to connect to database&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;AutoMigrate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;BasketballPlayer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{})&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//this will create a table in your database if it isn&amp;#39;t there already
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Lastly&lt;/strong&gt;, let&amp;rsquo;s update our handler so that it checks cache for data first and if not found, tries to fetch data from database:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetBasketballPlayer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basketBallPlayer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PlayerRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basketBallPlayer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PlayerResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GetId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Checking cache...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;playerVal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;found&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;found&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;playerVal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basketBallPlayer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basketBallPlayer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PlayerResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Checking database...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gorm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;postgres&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dbPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;failed to connect to database: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

		&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;BasketballPlayer&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;First&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Errorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;could not find player with id: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;gRPCResult&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GetgRPCModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gRPCResult&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DefaultExpiration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basketBallPlayer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PlayerResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;	&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gRPCResult&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
			&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Update: I improved caching slightly from Part 1, the code now stores pointers in cache instead of copying full values.&lt;/p&gt;

&lt;p&gt;Putting all the pieces into our app from Part 1 we get:&lt;/p&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/inemtsev/57cedc59988e2430bd28ad729367251b.js?file=main.go&#34;&gt;&lt;/script&gt;

&lt;p&gt;I added one row into the database for testing purposes:&lt;/p&gt;

&lt;p&gt;Sending a request to our API for player with &lt;strong&gt;Id&lt;/strong&gt; of &lt;strong&gt;1&lt;/strong&gt;, gives us:
&lt;p&gt;&lt;img src=&#34;../img/golang-microservices-adding-PostgreSQL/result1.png&#34; alt=&#34;cache only&#34;/&gt;&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Sending another request for a player with &lt;strong&gt;Id&lt;/strong&gt; of &lt;strong&gt;2&lt;/strong&gt; (this one is from our database):
&lt;p&gt;&lt;img src=&#34;../img/golang-microservices-adding-PostgreSQL/result2.png&#34; alt=&#34;cache and db only&#34;/&gt;&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Now, let&amp;rsquo;s take a look at our Gin API. I made a third request for player with Id of 2 to see if we get the expected speed-up from cache. And we do indeed:
&lt;p&gt;&lt;img src=&#34;../img/golang-microservices-adding-PostgreSQL/result3.png&#34; alt=&#34;cache only&#34;/&gt;&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Voila! It works as expected!
&lt;p&gt;&lt;img src=&#34;../img/golang-microservices-adding-PostgreSQL/JSON-result.png&#34; alt=&#34;json result&#34;/&gt;&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Go Warriors! :)&lt;/p&gt;
&lt;iframe src=&#34;https://giphy.com/embed/fe6GhFBexWZeMgt5nV&#34; width=&#34;480&#34; height=&#34;270&#34; frameBorder=&#34;0&#34; class=&#34;giphy-embed&#34; allowFullScreen&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;https://giphy.com/gifs/nba-emotion-stephen-curry-fe6GhFBexWZeMgt5nV&#34;&gt;via GIPHY&lt;/a&gt;&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Sexy Programming Languages to Learn 2020</title>
      <link>https://www.eventslooped.com/posts/sexy-programming-languages-to-learn-2020/</link>
      <pubDate>Sun, 22 Dec 2019 13:55:36 +0700</pubDate>
      <author>Ilya Nemtsev</author>
      <guid>https://www.eventslooped.com/posts/sexy-programming-languages-to-learn-2020/</guid>
      <description></description>
      
      <content>

&lt;h3 id=&#34;what-do-i-mean-by-sexy-programming-languages&#34;&gt;What do I mean by sexy programming languages?&lt;/h3&gt;

&lt;p&gt;I refer to programming languages as &lt;strong&gt;sexy&lt;/strong&gt; if they are not yet mainstream, but have plenty of buzz around them. They usually have a small but very energetic community, but may be lacking mature libraries here and there due to their only recent stardom. This also provides opportunities for ambitious developers to contribute to open-source. Therefore my list will exclude any mature languages like: Java, Python, C#, PHP and JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why you may want to learn these?&lt;/strong&gt; Being an early adopted can be risky, because the chosen platform may fail to take off. But, if chosen well, it can propell your resume to new heights as well as open up new opportunities for teaching others and contributing to open source. Below I will go through technologies that I consider solid choices for learning going into 2020.&lt;/p&gt;

&lt;h2 id=&#34;no-5-dart&#34;&gt;&lt;strong&gt;No.5 Dart&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Google-backed&lt;/strong&gt; programming language has been around since 2011, but its use has only skyrocketed in 2019 after the launch of &lt;strong&gt;Flutter&lt;/strong&gt; framework version 1.0. Flutter allows developers to develop cross-platform mobile applications with performance that is faster than React Native and approaching the speeds of platform-native apps. Dart has also been well received by the open source community, there are numerous interesting projects in Github that are using Dart, everything including web servers to desktop apps.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://aqzodowgen.cloudimg.io/fit/800x600/n/https://www.eventslooped.com/posts/img/sexy-programming-languages-to-learn-2020/multi-platform-mobile.jpg&#34; alt=&#34;cross-platform mobile development&#34;/&gt;
&lt;a style=&#34;background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &amp;quot;San Francisco&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Ubuntu, Roboto, Noto, &amp;quot;Segoe UI&amp;quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px&#34; href=&#34;https://unsplash.com/@7shifts?utm_medium=referral&amp;amp;utm_campaign=photographer-credit&amp;amp;utm_content=creditBadge&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; title=&#34;Download free do whatever you want high-resolution photos from 7shifts&#34;&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; style=&#34;height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white&#34; viewBox=&#34;0 0 32 32&#34;&gt;&lt;title&gt;unsplash-logo&lt;/title&gt;&lt;path d=&#34;M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;7shifts&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;According to my research, the best resources for learning Dart are: &lt;/p&gt;

&lt;p&gt;1) &lt;a href=&#34;https://www.udemy.com/course/learn-flutter-dart-to-build-ios-android-apps/&#34;&gt;Comprehensive Flutter and Dart Course on Udemy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) &lt;a href=&#34;https://www.youtube.com/playlist?list=PLlxmoA0rQ-LyHW9voBdNo4gEEIh0SjG-q&#34;&gt;Dart basics Youtube series&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) &lt;a href=&#34;https://www.youtube.com/watch?v=Ej_Pcr4uC2Q&#34;&gt;2 hour Youtube crash course&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;no-4-swift&#34;&gt;&lt;strong&gt;No.4 Swift&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Apple-backed&lt;/strong&gt; programming language which enables developers to build applications for both macOS, iOS and watchOS devices, as well as Linux.
Swift has made waves when it appeared in 2014, finally replacing the aging Objective-C. This language has been accepted well by the community and ranks very well in StackOverflow&amp;rsquo;s Most Loved Languages rankings. According to Google Trends, Swift has steadily risen in popularity, but its adoption has slowed a bit because development outside the Apple ecosystem has been quite limited. Nevertheless if you plan to do development for the Apple ecosystem, Swift is your #1 choice.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://aqzodowgen.cloudimg.io/fit/800x600/n/https://www.eventslooped.com/posts/img/sexy-programming-languages-to-learn-2020/apple-ecosystem.jpg&#34; alt=&#34;apple developer&#34;/&gt;
&lt;a style=&#34;background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &amp;quot;San Francisco&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Ubuntu, Roboto, Noto, &amp;quot;Segoe UI&amp;quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px&#34; href=&#34;https://unsplash.com/@igorson?utm_medium=referral&amp;amp;utm_campaign=photographer-credit&amp;amp;utm_content=creditBadge&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; title=&#34;Download free do whatever you want high-resolution photos from Igor Son&#34;&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; style=&#34;height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white&#34; viewBox=&#34;0 0 32 32&#34;&gt;&lt;title&gt;unsplash-logo&lt;/title&gt;&lt;path d=&#34;M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;&lt;span style=&#34;display:inline-block;padding:2px 3px&#34;&gt;Igor Son&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The best resources I could find for learning Swift: &lt;/p&gt;

&lt;p&gt;1) &lt;a href=&#34;https://www.udemy.com/course/the-comprehensive-guide-to-swift/&#34;&gt;Comprehensive Beginners Swift Course on Udemy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) &lt;a href=&#34;https://codewithchris.com/learn-swift/&#34;&gt;Learning Swift with Chris (Youtube series)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) &lt;a href=&#34;https://www.weheartswift.com/swift-programming-scratch-100-exercises/&#34;&gt;Online book for complete beginners&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;no-3-rust&#34;&gt;&lt;strong&gt;No.3 Rust&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Mozilla-backed&lt;/strong&gt; is a multi-paradigm, system programming language, which means that it is a language optimized for performance and better interaction with underlying hardware while sacrificing ease of use and multi-platform compatibility of its features. Mozilla announced Rust in 2010, but the first version was launched in 2015. Being a system-programming language, Rust requires a steeper learning curve. Developers that use Rust often refer to it as the more elegant or modern C++, and they share some commonalities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They are both on top of the hill when it comes to speed&lt;/li&gt;
&lt;li&gt;They both do not use a garbage collector&lt;/li&gt;
&lt;li&gt;Their syntax is similar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, Rust improves on C++ in several ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improved memory safety features&lt;/li&gt;
&lt;li&gt;Excellent package management&lt;/li&gt;
&lt;li&gt;Strict compiler that checks your code style&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Community around Rust is very enthusiastic and most developers that use it claim to love it. See for yourself, here are results from Stackoverflow&amp;rsquo;s survey of most loved programming languages:
 &lt;img src=&#34;../img/sexy-programming-languages-to-learn-2020/SO-most-loved-languages.png&#34; alt=&#34;most loved programming languages&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Plenty of desktop applications are currently being written in Rust, including their own Mozilla Firefox. However, there is plenty of enthusiastic developers contributing to its web frameworks as well, and there are good reasons for it, take a look at benchmarks maintained by techempower.com:
 &lt;img src=&#34;../img/sexy-programming-languages-to-learn-2020/techempower-benchmarks.PNG&#34; alt=&#34;fastest web frameworks&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Best resources I could find for picking up Rust: &lt;/p&gt;

&lt;p&gt;1) &lt;a href=&#34;https://www.udemy.com/course/rust-programming-language-complete-tutorial/&#34;&gt;Comprehensive Rust Course on Udemy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) &lt;a href=&#34;https://doc.rust-lang.org/book/title-page.html&#34;&gt;Free online book on Rust&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;no-2-kotlin&#34;&gt;&lt;strong&gt;No.2 Kotlin&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Jetbrains-backed&lt;/strong&gt; programming language is a fantastic choice for Java developers because it runs on the same JVM platform. Kotlin version 1.0 has been released in 2016 and has grown in popularity very quickly. According to my personal experience, Kotlin has been adopted well in the mobile-development community for Android and I can see its growth continue. In comparison to Java, Kotlin developers like a more concise syntax and modern language features like object immutability, extension methods and deconstructor methods. The list goes on. As of 2019 Google announced that Kotlin is its preferred language for Android development. Here is an introduction of Kotlin by Google at their Google I/O conference of 2017:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/X1RVYt2QKQE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;The best resources I could find for learning Kotlin: &lt;/p&gt;

&lt;p&gt;1) &lt;a href=&#34;https://www.udemy.com/course/the-complete-kotlin-developer-course&#34;&gt;Complete Android Kotlin Developer Course on Udemy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) &lt;a href=&#34;https://play.kotlinlang.org/koans/overview&#34;&gt;Step by step guide to Kotlin syntax with hands on exercises&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) &lt;a href=&#34;https://www.youtube.com/playlist?list=PLlxmoA0rQ-LwgK1JsnMsakYNACYGa1cjR&#34;&gt;Extensive Youtube playlist covering Kotlin&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;no-1-golang-go&#34;&gt;&lt;strong&gt;No.1 Golang (Go)&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Google-backed&lt;/strong&gt; programming language takes an ultra-modern approach to programming. Instead of adding new features to what is already popular, Go gets rid of many older concepts of programming languages. Lack of inheritance is one such example, which forces the developer to use composition instead. After removing everything the founders considered legacy, and adding modern approaches to managing concurrency and memory, a new, concise, clean programming language was born. Some may even call it sexy ;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../img/sexy-programming-languages-to-learn-2020/gopher-dance.gif&#34; alt=&#34;Happy Gopher!&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Several big names in the industry make use of Go; Uber, Lift, Grab and Shopify are just some examples. Docker is built in Go as well. In terms of maturity Go is the most popular out of the 5 programming languages, approaching the levels of mainstream.&lt;/p&gt;

&lt;p&gt;Go is generally loved by its developers (as seen the Rust chart above) and developers that know Go are quite well paid:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../img/sexy-programming-languages-to-learn-2020/SO-highest-paid-languages.PNG&#34; alt=&#34;Highest paid developers&#34;&gt;
&lt;p&gt;The best resources I can find for learning Golang: &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;1) &lt;a href=&#34;https://www.udemy.com/course/learn-how-to-code/&#34;&gt;Todd McLeod&amp;rsquo;s Udemy Course (one of my fav courses)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) &lt;a href=&#34;https://astaxie.gitbooks.io/build-web-application-with-golang/content/en/&#34;&gt;Building Web Application in Golang (An excellent comprehensive totorial)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) &lt;a href=&#34;https://gobyexample.com/&#34;&gt;Go by Example (Dozens of basic examples for common tasks in Go)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google Trends comparing these 5 programming languages:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../img/sexy-programming-languages-to-learn-2020/GT-trends.PNG&#34; alt=&#34;Trend of sexy programming langauges&#34;&gt;&lt;/p&gt;

&lt;p&gt;I hope this helps you decide how to spice up your resume or your side projects :)&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Golang Microservices Part 1 - gRPC Communication</title>
      <link>https://www.eventslooped.com/posts/golang-microservices-grpc-communication/</link>
      <pubDate>Fri, 29 Nov 2019 14:55:29 +0700</pubDate>
      <author>Ilya Nemtsev</author>
      <guid>https://www.eventslooped.com/posts/golang-microservices-grpc-communication/</guid>
      <description></description>
      
      <content>

&lt;h3 id=&#34;summary-setting-up-grpc-communication&#34;&gt;Summary - Setting up gRPC communication&lt;/h3&gt;

&lt;p&gt;gRPC is a modern, highly-efficient method of communication between systems built by Google. gRPC uses the new and efficient &lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP/2&#34;&gt;HTTP/2 network protocol&lt;/a&gt; as well Google&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Protocol_Buffers&#34;&gt;Protocol Buffers&lt;/a&gt; (Protobuf) method of serialization which allows for more light-weight and predictable communication. Protocol Buffers can be used with any technology stack out there; code can be generated from the &lt;strong&gt;.proto&lt;/strong&gt; file for nearly every programming language available.&lt;/p&gt;

&lt;h3 id=&#34;protobuf&#34;&gt;ProtoBuf&lt;/h3&gt;

&lt;p&gt;Before setting up our server and client, we need to define the message/contract structure and service definitions using Protocol Buffers in a &lt;strong&gt;.proto&lt;/strong&gt; file. If you need a guide on the protocol buffer language, &lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/proto3&#34;&gt;you can read about it here&lt;/a&gt;; although the language is quite simplistic and you may be able to get away with just looking at these examples for now.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create a microservice that will provide information on various basketball players over gRPC. Note: Below guide assumes Go runtime is already installed correctly.&lt;/p&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/inemtsev/da51690a81854591e3899e56a95fa3de.js?file=basketball.proto&#34;&gt;&lt;/script&gt;

&lt;p&gt;Now we are ready to generate code from our proto file. For this we will need the Protobuf compiler (which is written in C++). You can download the compiler for your OS from &lt;a href=&#34;https://github.com/protocolbuffers/protobuf/releases&#34;&gt;this Github page&lt;/a&gt;. Since I am using a Windows machine at the moment, I download the &lt;strong&gt;protoc-3.11.0-win64.zip&lt;/strong&gt; for example. Within the download archive you will find a &lt;strong&gt;/bin folder&lt;/strong&gt; containing the protoc binary. Take this binary and place it nearby your protoc file or vise-versa for easy access (I placed it in &lt;code&gt;C:\Users\myusername\go\src\protoc_bin&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Lastly, we will need the protoc-gen-go plugin for our compiler. Run the following command to obtain it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;go get -u github.com/golang/protobuf/protoc-gen-go&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, we are ready to compile. In command line, browse to your protoc binary (in my case &lt;code&gt;C:\Users\myusername\go\src\protoc_bin&lt;/code&gt;) and run the following commands, where &lt;code&gt;..\basic-gRPC-proto\&lt;/code&gt; is the path to my folder containing the proto file and &lt;strong&gt;basketball.proto&lt;/strong&gt; is the name of that proto file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;protoc basketball.proto --go_out=plugins=grpc:. --proto_path=..\basic-gRPC-proto\&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can see that &lt;strong&gt;basketball.pb.go&lt;/strong&gt; has been generated! Yay!&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;https://giphy.com/embed/axu6dFuca4HKM&#34; width=&#34;480&#34; height=&#34;228&#34; frameBorder=&#34;0&#34; class=&#34;giphy-embed&#34; allowFullScreen&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;https://giphy.com/gifs/axu6dFuca4HKM&#34;&gt;via GIPHY&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;

&lt;h3 id=&#34;implementing-our-newly-generated-go-code-server&#34;&gt;Implementing our newly generated Go code (Server)&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s take a deep breath, because the hardest part is already done :)&lt;/p&gt;

&lt;p&gt;To make use of our new .go package I copied the resulting file to &lt;code&gt;...\go\src\basic-gRPC-proto&lt;/code&gt; for convenience. Then back at src folder, create a folder for your server, I called it &lt;strong&gt;basic-gRPC-server&lt;/strong&gt;. Now, lets create our main.go and run this command to get google&amp;rsquo;s gRPC library:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;go get google.golang.org/grpc&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I am using an in-memory cache to store our sample data, just for fun. This library can be installed via the following command:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;go get github.com/patrickmn/go-cache&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The server code consists of two parts:&lt;/p&gt;

&lt;p&gt;1) Attaching required methods to our server (as defined in our proto file)&lt;/p&gt;

&lt;p&gt;2) Starting the server on some IP&lt;/p&gt;

&lt;p&gt;First part looks like this. This method is very similar to the definition we defined in the proto file with a few extras. Take a look at the &lt;strong&gt;generated go file&lt;/strong&gt; and find your GetBasketballPlayer method, this will show you the signature you will need to have, to satisfy the server definition:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
    
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Cache&lt;/span&gt;
    
    &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetBasketballPlayer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basketBallPlayer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PlayerRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basketBallPlayer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PlayerResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    	&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GetId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    
    	&lt;span class=&#34;nx&#34;&gt;playerVal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;found&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;found&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    		&lt;span class=&#34;nx&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;playerVal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basketBallPlayer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basketBallPlayer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PlayerResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    			&lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    		&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
    	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
    	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Errorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;could not find player with id: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, for the main() course. Our main function simply creates a sample value in our cache and starts the server.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Starting gRPC micro-service...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Minute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;70&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Minute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;basketBallPlayer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;Id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;              &lt;span class=&#34;s&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;FirstName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;       &lt;span class=&#34;s&#34;&gt;&amp;#34;James&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;LastName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;        &lt;span class=&#34;s&#34;&gt;&amp;#34;LeBron&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;Age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;             &lt;span class=&#34;mi&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;PhotoUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;        &lt;span class=&#34;s&#34;&gt;&amp;#34;https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/1610612747/2019/260x190/2544.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;PointsPerGame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;AssistsPerGame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;ReboundsPerGame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DefaultExpiration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;net&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;:50051&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatalf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Failed to start listener %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;basketBallPlayer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;RegisterPlayerServiceServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{})&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Serve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatalf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;failed to serve %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Take note of this line. If you provide the wrong signature for your proto service method above, compiler will complain here:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;basketBallPlayer.RegisterPlayerServiceServer(s, &amp;amp;server{})&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Putting these two together, your gRPC server will look like this:&lt;/p&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/inemtsev/da51690a81854591e3899e56a95fa3de.js?file=server-main.go&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;implementing-our-newly-generated-go-code-client&#34;&gt;Implementing our newly generated Go code (Client)&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s take another deep breath, the last part is even easier. We will build a basic Web API that can be called externally and returns JSON, in the background our API will call the above microservice via gRPC. Let&amp;rsquo;s get started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First, let&amp;rsquo;s setup a basic API with Gin web framework.&lt;/strong&gt;
Download the &lt;a href=&#34;https://github.com/gin-gonic/gin&#34;&gt;Gin HTTP framework&lt;/a&gt; package:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;go get github.com/gin-gonic/gin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I created a folder for my API called &lt;strong&gt;basic-gRPC-client&lt;/strong&gt; with a main.go file. Then added the following code:&lt;/p&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/inemtsev/da51690a81854591e3899e56a95fa3de.js?file=client-main.go&#34;&gt;&lt;/script&gt;

&lt;p&gt;I love how easily you can setup a simple web server in Go. The main function is mostly router configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sAddress&lt;/strong&gt; here refers to the address of your gRPC server/microservice. Depending on your network configuration, you may need to use your internal IPs for this. &lt;strong&gt;50051&lt;/strong&gt; is the port commonly used for gRPC.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;grpc.WithInsecure()&lt;/strong&gt; is used in this example because we are not securing our connection transport via SSL.&lt;/p&gt;

&lt;h3 id=&#34;let-s-go-no-pun-intended&#34;&gt;Let&amp;rsquo;s Go! No pun intended ;)&lt;/h3&gt;

&lt;p&gt;After pulling this code into two VMs on Google Cloud Platform. I ran both services and everything checks out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../img/golang-microservices-gRPC-communication/200-result.PNG&#34; alt=&#34;gin results&#34;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/golang-microservices-gRPC-communication/postman-checks-out.PNG&#34; alt=&#34;postman&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Hope this helped you setup gRPC connectivity between your microservices :)&lt;/p&gt;

&lt;p&gt;In Part 2 of this series, let&amp;rsquo;s add Postgre SQL connectivity.&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>KrakenD: Writing Plugins using Golang</title>
      <link>https://www.eventslooped.com/posts/krakend-writing-plugins/</link>
      <pubDate>Sat, 19 Oct 2019 18:59:02 +0700</pubDate>
      <author>Ilya Nemtsev</author>
      <guid>https://www.eventslooped.com/posts/krakend-writing-plugins/</guid>
      <description></description>
      
      <content>

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.krakend.io&#34;&gt;KrakenD&lt;/a&gt; has caught my attention as a Gateway solution because of its claim at incredible performance and extensibility. It is Open Source and can be tailored to your needs or can be extended in a convenient way with its support for &lt;a href=&#34;https://golang.org/pkg/plugin/&#34;&gt;Golang Plugins&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;plugin-what&#34;&gt;Plugin, what?&lt;/h3&gt;

&lt;p&gt;Go plugins are a fairly new addition to Golang (support starting with Go 1.8), but they provide a very innovative way to add functionality to a Go application. Go plugins are soft-linked, meaning that they are picked up by the main appication at runtime. Since plugins need to be part of the &lt;strong&gt;main&lt;/strong&gt; package, their main() function is not run; they are initialized once and cannot be closed. Once small caveat of plugins at the time of writing, is that they cannot be compiled on a Windows OS; Linux and MacOS work just fine. For the following examples I will use Linux to show how to setup KrakenD and add a plugin.&lt;/p&gt;

&lt;h3 id=&#34;benefits-of-using-go-plugins-with-krakend&#34;&gt;Benefits of using Go Plugins with KrakenD&lt;/h3&gt;

&lt;p&gt;KrakenD has a small but very active and growing community; features are constantly being added and extended. If we wanted to add our own functionality to the pipeline and extend KrakenD, we could certainly do that. But, if a new version of KrakenD was to be released we would have to manually merge these changes into our own version of KrakenD. Wouldn&amp;rsquo;t it be easier if we could simply drop a plugin file next to KrakenD binary and receive benefits upon app restart? This is the perfect case for Golang plugins.&lt;/p&gt;

&lt;h3 id=&#34;how-can-you-get-started&#34;&gt;How can you get started&lt;/h3&gt;

&lt;p&gt;I will not dive into how to modify the &lt;a href=&#34;https://www.krakend.io&#34;&gt;KrakenD&lt;/a&gt; core, it is open source after all and sky is the limit. Instead, I will clone/download the binary source from &lt;a href=&#34;https://github.com/devopsfaith/krakend-ce&#34;&gt;KrakenD-CE Github&lt;/a&gt;. What is KrakenD-CE and how does it differ from KrakenD? KrakenD-CE is a Community Edition of KrakenD, it includes many additional middlewares for added functionality that creators thought were useful. KrakenD on its own is more barebones. &lt;strong&gt;You can think of KrakenD-CE as KrakenD + Extra Stuff.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Assuming you have Go Binary installed and KrakenD folder located in your PATH environment location, compile in command-line via command:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;make build&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you have not installed Go Binaries, get them here: &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;https://golang.org/doc/install&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you receive an error &amp;ldquo;make command not found&amp;rdquo; install build essentials using one of the following commands, depending on your distro.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo yum install build-essential
sudo apt-get install build-essential&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;configuring-a-basic-setup&#34;&gt;Configuring a basic setup&lt;/h3&gt;

&lt;p&gt;Once you have KrakenD built, let&amp;rsquo;s take a look at the settings. These are contained in &lt;strong&gt;krakend.json&lt;/strong&gt;. Most of the functionality you will need from a Gateway is configurable from this file. I suggest using the online &lt;a href=&#34;https://www.krakend.io/docs/configuration/overview/&#34;&gt;KrakenDesigner&lt;/a&gt; to generate your own configuration file. I created a basic configuration like this. Here I simply take the GitHub username as a parameter and call api.github.com as my downstream service to obtain a user&amp;rsquo;s profile in json format.&lt;/p&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/inemtsev/cc0ca70682d198abf00c0b1a8f246d57.js?file=krakend.json&#34;&gt;&lt;/script&gt;

&lt;p&gt;You can test your configuration via the following command with debugging:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;./krakend run -c krakend.json &amp;ndash;debug&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;creating-the-plugin&#34;&gt;Creating the plugin&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s create a sample plugin that makes a call to Github API gets another user&amp;rsquo;s data and attaches the response as a header to the downstream service.&lt;/p&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/inemtsev/cc0ca70682d198abf00c0b1a8f246d57.js?file=headerModPlugin.go&#34;&gt;&lt;/script&gt;

&lt;p&gt;Some things to notice here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;func main() is not necessary here because it will be ignored, but my IDE was complaining so it&amp;rsquo;s there for decoration :)&lt;/li&gt;
&lt;li&gt;attachuserid is the parameter we will pass in to the configuration in our krakend.json, we receive it here and assign to &lt;strong&gt;attachUserID&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s configure our plugin. Add the following lines to the root of your configuration:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;plugin&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;pattern&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;.so&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;folder&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;extra_config&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;github_com/devopsfaith/krakend/transport/http/server/handler&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;headerModPlugin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;attachuserid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;rsc&amp;#34;&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Lastly, KrakenD by default removes all headers from the request for performance and security reasons. This behavior can be turned off, but we will simply add an exception for our plugin&amp;rsquo;s header to our config by addin these lines under the &lt;strong&gt;endpoint&lt;/strong&gt; part of our configuration:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;headers_to_pass&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;X-Friend-User&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Your final configuration should look something &lt;a href=&#34;https://gist.githubusercontent.com/inemtsev/cc0ca70682d198abf00c0b1a8f246d57/raw/cbe53ee769c7a70fb135efb93ddfebe93dbd3eea/krakend_with_plugin.json&#34;&gt;like this.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice the &lt;strong&gt;name&lt;/strong&gt; parameter that needs to match the one in our plugin and also notice the &lt;strong&gt;attachuserid&lt;/strong&gt; parameter that we defined inside our plugin. I am passing in the username of &lt;strong&gt;Russ Cox&lt;/strong&gt;, one of the big names behind Golang.&lt;/p&gt;

&lt;p&gt;If your configuration is correct, when you run KrakenD in debug mode you will see the message: injecting plugin headerModPlugin. :)&lt;/p&gt;

&lt;p&gt;Your header will now be passed down to your downstream service(s)!&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>June/July 2019 in Bangkok Photos</title>
      <link>https://www.eventslooped.com/posts/july-2019-photos/</link>
      <pubDate>Mon, 12 Aug 2019 23:27:19 +0700</pubDate>
      <author>Ilya Nemtsev</author>
      <guid>https://www.eventslooped.com/posts/july-2019-photos/</guid>
      <description></description>
      
      <content>&lt;div class=&#34;my-slider&#34;&gt;
  &lt;div&gt;
    &lt;a href=&#34;https://aqzodowgen.cloudimg.io/bound/1920x1080/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-eb9ff5fa-441f-4ddd-8668-2ba2fb25e9a5.jpg&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://aqzodowgen.cloudimg.io/fit/800x600/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-eb9ff5fa-441f-4ddd-8668-2ba2fb25e9a5.jpg&#34;/&gt;
    &lt;/a&gt;
    &lt;div&gt;Sunny day on top of &lt;a href=&#34;https://goo.gl/maps/YYhQMQjTUpQBqfpcA&#34; target=&#34;_blank&#34;&gt;Cielo Sky Bar&lt;/a&gt;&lt;/div&gt;
    &lt;div&gt;Taken with: Pixel 2 XL&lt;/div&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href=&#34;https://aqzodowgen.cloudimg.io/bound/1920x1080/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-ae17cef3-6a6b-401b-9bc3-2b37d882d545.jpg&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://aqzodowgen.cloudimg.io/fit/800x600/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-ae17cef3-6a6b-401b-9bc3-2b37d882d545.jpg&#34;/&gt;
    &lt;/a&gt;
    &lt;div&gt;Crazy traffic on Sukhumvit near &lt;a href=&#34;https://goo.gl/maps/BgCZp193SvHbAjpE7&#34; target=&#34;_blank&#34;&gt;Central World Shopping Center&lt;/a&gt;&lt;/div&gt;
    &lt;div&gt;Taken with: Pixel 2 XL&lt;/div&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href=&#34;https://aqzodowgen.cloudimg.io/bound/1920x1080/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-9a5f4e4f-89b7-4221-91c8-f314d522f1f3.jpg&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://aqzodowgen.cloudimg.io/fit/800x600/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-9a5f4e4f-89b7-4221-91c8-f314d522f1f3.jpg&#34;/&gt;
    &lt;/a&gt;
    &lt;div&gt;I loved the beautiful decorations at &lt;a href=&#34;https://goo.gl/maps/sLMv11EzJoXntAf36&#34; target=&#34;_blank&#34;&gt;Icon Siam Shopping Center.&lt;/a&gt; People traffic here is very intense on the weekends though.&lt;/div&gt;
    &lt;div&gt;Taken with: Pixel 2 XL&lt;/div&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href=&#34;https://aqzodowgen.cloudimg.io/bound/1920x1080/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-ce8a643e-4cf4-41c7-9243-e068812c9523.jpg&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://aqzodowgen.cloudimg.io/fit/800x600/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-ce8a643e-4cf4-41c7-9243-e068812c9523.jpg&#34;/&gt;
    &lt;/a&gt;
    &lt;div&gt;There is a small floating market inside the &lt;a href=&#34;https://goo.gl/maps/sLMv11EzJoXntAf36&#34; target=&#34;_blank&#34;&gt;Icon Siam Shopping Center&lt;/a&gt;. How cool is that!&lt;/div&gt;
    &lt;div&gt;Taken with: Pixel 2 XL&lt;/div&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href=&#34;https://aqzodowgen.cloudimg.io/bound/1920x1080/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-1841e5cb-f869-4944-9b0d-52e64e282f8e.jpg&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://aqzodowgen.cloudimg.io/fit/800x600/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-1841e5cb-f869-4944-9b0d-52e64e282f8e.jpg&#34;/&gt;
    &lt;/a&gt;
    &lt;div&gt;Icon Siam has plenty of venues that sell &lt;a href=&#34;https://en.wikipedia.org/wiki/Mango_sticky_rice&#34; target=&#34;_blank&#34;&gt;Mango sticky rice.&lt;/a&gt; If you are visiting Thailand, this is a must-try dessert. &lt;/div&gt;
    &lt;div&gt;Taken with: Pixel 2 XL&lt;/div&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href=&#34;https://aqzodowgen.cloudimg.io/bound/1920x1080/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-29e62b63-32e4-4d49-bc56-27913a9272b0.jpg&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://aqzodowgen.cloudimg.io/fit/800x600/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-29e62b63-32e4-4d49-bc56-27913a9272b0.jpg&#34;/&gt;
    &lt;/a&gt;
    &lt;div&gt;If your bank account is too large you can do some serious shopping at Icon Siam. This shopping center is very beautiful, it&#39;s worth visiting at least once. &lt;/div&gt;
    &lt;div&gt;Taken with: Pixel 2 XL&lt;/div&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href=&#34;https://aqzodowgen.cloudimg.io/bound/1920x1080/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-d3e8410b-5bf5-422e-a392-b1b773e151a8.jpg&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://aqzodowgen.cloudimg.io/fit/800x600/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-d3e8410b-5bf5-422e-a392-b1b773e151a8.jpg&#34;/&gt;
    &lt;/a&gt;
    &lt;div&gt;Rainy day on &lt;a href=&#34;https://goo.gl/maps/Yz5k7shuer2N8KSC7&#34; target=&#34;_blank&#34;&gt;Khao San Road&lt;/a&gt;. Lots of quirky and unique shops here, although many tourist traps as well. &lt;/div&gt;
    &lt;div&gt;Taken with: Pixel 2 XL&lt;/div&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href=&#34;https://aqzodowgen.cloudimg.io/bound/1920x1080/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-f5db7083-da6e-44d3-bd20-9b4f666f7a89.jpg&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://aqzodowgen.cloudimg.io/fit/800x600/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-f5db7083-da6e-44d3-bd20-9b4f666f7a89.jpg&#34;/&gt;
    &lt;/a&gt;
    &lt;div&gt;I love the vibe of Khao San Road, it may be overrun by scammers in some spots, but I can&#39;t deny the uniqueness of this place. &lt;/div&gt;
    &lt;div&gt;Taken with: Pixel 2 XL&lt;/div&gt;
  &lt;/div&gt;
   &lt;div&gt;
    &lt;a href=&#34;https://aqzodowgen.cloudimg.io/bound/1920x1080/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-63797432-348a-48eb-9ded-7e99e9b61eb2.jpg&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://aqzodowgen.cloudimg.io/fit/800x600/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-63797432-348a-48eb-9ded-7e99e9b61eb2.jpg&#34;/&gt;
    &lt;/a&gt;
    &lt;div&gt;&lt;a href=&#34;https://goo.gl/maps/RvGQrNs3bHaa8ycn6&#34; target=&#34;_blank&#34;&gt;Chinatown in Bangkok&lt;/a&gt; is vast, colorful and lively.&lt;/div&gt;
    &lt;div&gt;Taken with: Pixel 2 XL&lt;/div&gt;
  &lt;/div&gt;
   &lt;div&gt;
    &lt;a href=&#34;https://aqzodowgen.cloudimg.io/bound/1920x1080/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-f3095ebb-fb9e-43d8-a192-0dd2b3813f5e.jpg&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://aqzodowgen.cloudimg.io/fit/800x600/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-f3095ebb-fb9e-43d8-a192-0dd2b3813f5e.jpg&#34;/&gt;
    &lt;/a&gt;
    &lt;div&gt;River-view from one of my favourite restaurants, &lt;a href=&#34;https://goo.gl/maps/meAreefEdbREHGLs9&#34; target=&#34;_blank&#34;&gt;Viva Aviv The River&lt;/a&gt;&lt;/div&gt;
    &lt;div&gt;Taken with: Pixel 2 XL&lt;/div&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href=&#34;https://aqzodowgen.cloudimg.io/bound/1920x1080/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-c223043b-87d4-4837-a120-547b6e7c28c0.jpg&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://aqzodowgen.cloudimg.io/fit/800x600/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-c223043b-87d4-4837-a120-547b6e7c28c0.jpg&#34;/&gt;
    &lt;/a&gt;
    &lt;div&gt;Beautiful sunset view of the city&lt;/div&gt;
    &lt;div&gt;Taken with: Pixel 2 XL&lt;/div&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href=&#34;https://aqzodowgen.cloudimg.io/bound/1920x1080/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-96834bda-025a-4e41-bc74-9ff31251b833.jpg&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://aqzodowgen.cloudimg.io/fit/800x600/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-96834bda-025a-4e41-bc74-9ff31251b833.jpg&#34;/&gt;
    &lt;/a&gt;
    &lt;div&gt;&lt;a href=&#34;https://goo.gl/maps/YVCSww2AXx8tDPWi6&#34; target=&#34;_blank&#34;&gt;Ratchada Rot Fai Train Night Market&lt;/a&gt; is absolutely amazing. The variety of food at amazing prices is mind-boggling! &lt;/div&gt;
    &lt;div&gt;Taken with: Pixel 2 XL&lt;/div&gt;
  &lt;/div&gt;
    &lt;div&gt;
    &lt;a href=&#34;https://aqzodowgen.cloudimg.io/bound/1920x1080/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-716f2793-b44a-4000-9347-d364c2d97e66.jpg&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://aqzodowgen.cloudimg.io/fit/800x600/n/https://mytechblog.blob.core.windows.net/blog-photos/20190818-716f2793-b44a-4000-9347-d364c2d97e66.jpg&#34;/&gt;
    &lt;/a&gt;
    &lt;div&gt;My workstation setup in Bangkok so far. This is where the magic happens. &lt;/div&gt;
    &lt;div&gt;Taken with: Pixel 2 XL&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</content>
      
    </item>
    
    <item>
      <title>Use Golang to Upload Files to Azure Blob Storage</title>
      <link>https://www.eventslooped.com/posts/use-golang-to-upload-files-to-azure-blob-storage/</link>
      <pubDate>Sun, 04 Aug 2019 17:33:01 +0700</pubDate>
      <author>Ilya Nemtsev</author>
      <guid>https://www.eventslooped.com/posts/use-golang-to-upload-files-to-azure-blob-storage/</guid>
      <description></description>
      
      <content>

&lt;p&gt;If you are enjoying Go and its community as much as myself but have been using the Azure Cloud Platform for some time already, you will probably want to use Azure Blob Storage at some point. In that case, this blog post is for you.&lt;/p&gt;

&lt;h3 id=&#34;you-will-need&#34;&gt;You will need:&lt;/h3&gt;

&lt;p&gt;The first thing you need to do is make sure you set up your &lt;strong&gt;blob storage account&lt;/strong&gt; in Azure Portal and create a &lt;strong&gt;blob container&lt;/strong&gt;. In this example I created a blob container called &lt;em&gt;blog-photos&lt;/em&gt;. Note your &lt;strong&gt;blob account name&lt;/strong&gt; and &lt;strong&gt;blob container name&lt;/strong&gt; because you will need these.&lt;/p&gt;

&lt;p&gt;&lt;div&gt;Your Azure Blob Service endpoint will usually have the structure: &lt;/div&gt;&lt;strong&gt;https://&amp;lt;yourblobaccountname&amp;gt;.blob.core.windows.net/&lt;/strong&gt;
&lt;p&gt;  &lt;/p&gt;
Your &lt;strong&gt;Azure Access Key&lt;/strong&gt; can be found under Blob Storage Account &amp;gt; Access Keys. Grab the first Key and that will be sufficient.&lt;/p&gt;

&lt;h3 id=&#34;das-code&#34;&gt;Das Code:&lt;/h3&gt;

&lt;p&gt;First, let&amp;rsquo;s create a method that gives us all the credentials we need for uploading files. In production you will want to use a more secure method of handling credentials, but for this example hard-coding will do.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetAccountInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;azrKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;lt;your_azure_access_key&amp;gt;&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;azrBlobAccountName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;mytechblog&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;azrPrimaryBlobServiceEndpoint&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://%s.blob.core.windows.net/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;azrBlobAccountName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;azrBlobContainer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;blog-photos&amp;#34;&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;azrKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;azrBlobAccountName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;azrPrimaryBlobServiceEndpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;azrBlobContainer&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, let&amp;rsquo;s come up with a file name structure for our blobs. Since my sample app will upload all jpeg images in a folder, this small method will do the trick for me; a combination of date and  UUID. (The code below uses the package &lt;a href=&#34;github.com/gofrs/uuid&#34;&gt;github.com/gofrs/uuid&lt;/a&gt;, you will need to install it to use uuid.NewV4())&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetBlobName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewV4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s-%v.jpg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;20060102&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, let&amp;rsquo;s build the Uploader. This will require Azure Blob SDK: &lt;a href=&#34;github.com/Azure/azure-storage-blob-go/azblob&#34;&gt;github.com/Azure/azure-storage-blob-go/azblob&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// The below method assumes you already have the byte array ready to go
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;UploadBytesToBlob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;azrKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;accountName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;endPoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;container&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetAccountInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// This is our account info method
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;endPoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetBlobName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// This uses our Blob Name Generator to create individual blob urls
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;credential&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;errC&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;azblob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewSharedKeyCredential&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;accountName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;azrKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// Finally we create the credentials object required by the uploader
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;errC&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;errC&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// Another Azure Specific object, which combines our generated URL and credentials
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;blockBlobUrl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;azblob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewBlockBlobURL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;azblob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewPipeline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;credential&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;azblob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PipelineOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}))&lt;/span&gt;    

	&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Background&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// We create an empty context (https://golang.org/pkg/context/#Background)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Provide any needed options to UploadToBlockBlobOptions (https://godoc.org/github.com/Azure/azure-storage-blob-go/azblob#UploadToBlockBlobOptions)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;azblob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UploadToBlockBlobOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;BlobHTTPHeaders&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;azblob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;BlobHTTPHeaders&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;ContentType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;image/jpg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;//  Add any needed headers here
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// Combine all the pieces and perform the upload using UploadBufferToBlockBlob (https://godoc.org/github.com/Azure/azure-storage-blob-go/azblob#UploadBufferToBlockBlob)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;errU&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;azblob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;UploadBufferToBlockBlob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;blockBlobUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;blockBlobUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;errU&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see a fully working example in &lt;a href=&#34;https://github.com/inemtsev/go_blob_uploader/blob/master/main.go&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Make Multiple Api Calls At The Same Time With GoRoutines</title>
      <link>https://www.eventslooped.com/posts/golang-make-multiple-api-calls/</link>
      <pubDate>Mon, 03 Jun 2019 21:16:17 +0700</pubDate>
      <author>Ilya Nemtsev</author>
      <guid>https://www.eventslooped.com/posts/golang-make-multiple-api-calls/</guid>
      <description></description>
      
      <content>&lt;p&gt;Golang is efficient, very efficient. Much of this efficiency is attributed to its unique abstractions when dealing with concurrency. Java for example, maps its threads to OS threads, while Go uses its own goroutines scheduler to further abstract its lightweight goroutines from OS threads. In short, Golang is very frugal with how it uses OS threads; if a goroutine becomes blocked, Go&amp;rsquo;s scheduler will switch in another goroutine in its place to keep the thread busy as much as possible. Since each CPU core handles a limited number of threads (and spawning new threads is expensive), keeping these threads fed with work is a great thing indeed.&lt;/p&gt;

&lt;p&gt;So, how do we use Golang to make multiple http calls concurrently? If you have used C# or modern JavaScript you may have used &lt;strong&gt;async/await&lt;/strong&gt; to make multiple api calls. Golang isn&amp;rsquo;t quite as easy, but it is all in the name of efficiency. Go always has at least one goroutine running, which takes care of running main(). We can spawn new routines with the keyword &lt;strong&gt;go&lt;/strong&gt; before the function call. If you worked with Java/C# asynchronous calls, then &lt;em&gt;goroutines&lt;/em&gt; may remind you of the idea of &lt;em&gt;context&lt;/em&gt;. Go Scheduler allows the developer to make thousands of these lightweight goroutines and manages the CPU time spent on each one for us. Everytime a function prefixed with &lt;strong&gt;go&lt;/strong&gt; is executed, a new goroutine is created to run that function, the &lt;strong&gt;main&lt;/strong&gt; goroutine continues on its way immidiately after spawning a new goroutine, until it hits a blocking operator (similar to an await in C# or Js).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with a simple console app that make calls to a few GitHub profiles and checks whether the connection was successful or not. At first, there are no goroutines here and all the calls are made consecutively; booo not very efficient.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;links&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;s&#34;&gt;&amp;#34;https://github.com/fabpot&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;s&#34;&gt;&amp;#34;https://github.com/andrew&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;s&#34;&gt;&amp;#34;https://github.com/taylorotwell&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;s&#34;&gt;&amp;#34;https://github.com/egoist&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;s&#34;&gt;&amp;#34;https://github.com/HugoGiraudel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nf&#34;&gt;checkUrls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;checkUrls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;urls&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;urls&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nf&#34;&gt;checkUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;checkUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;We could not reach:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Success reaching the website:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First, we need to add something called &lt;strong&gt;channel&lt;/strong&gt;. Since Golang functions running in their own goroutines are just simple functions, we need a way through which inner goroutines can tell their result to the outer goroutine; this is done using channels. We initialize them simply by: &lt;strong&gt;c := make(chan string)&lt;/strong&gt;
We are able to send the resulting value(s) to our channel using the &lt;strong&gt;&amp;lt;-&lt;/strong&gt; arrow, and we assign the value from the channel using this arrow as well.&lt;/p&gt;

&lt;p&gt;Second, we need to add a tracker of sorts, to keep track of how many values we should be expecting to come out of this channel. This can be done using the type sync.WaitGroup.&lt;/p&gt;

&lt;p&gt;Implementing these two ideas, results in the following:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;sync&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;links&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;s&#34;&gt;&amp;#34;https://github.com/fabpot&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;s&#34;&gt;&amp;#34;https://github.com/andrew&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;s&#34;&gt;&amp;#34;https://github.com/taylorotwell&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;s&#34;&gt;&amp;#34;https://github.com/egoist&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;s&#34;&gt;&amp;#34;https://github.com/HugoGiraudel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nf&#34;&gt;checkUrls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;checkUrls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;urls&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WaitGroup&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;urls&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// This tells the waitgroup, that there is now 1 pending operation here
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;checkUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// this function literal (also called &amp;#39;anonymous function&amp;#39; or &amp;#39;lambda expression&amp;#39; in other languages)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// is useful because &amp;#39;go&amp;#39; needs to prefix a function and we can save some space by not declaring a whole new function for this
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// this blocks the goroutine until WaitGroup counter is zero
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;nb&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// Channels need to be closed, otherwise the below loop will go on forever
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;p&#34;&gt;}()&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// This calls itself
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// this shorthand loop is syntactic sugar for an endless loop that just waits for results to come in through the &amp;#39;c&amp;#39; channel
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;checkUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WaitGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;We could not reach:&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// pump the result into the channel
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Success reaching the website:&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// pump the result into the channel
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
      
    </item>
    
    <item>
      <title>Becoming a Developer in 2019</title>
      <link>https://www.eventslooped.com/posts/becoming-a-developer-in-2019/</link>
      <pubDate>Sun, 12 May 2019 14:41:36 +0700</pubDate>
      <author>Ilya Nemtsev</author>
      <guid>https://www.eventslooped.com/posts/becoming-a-developer-in-2019/</guid>
      <description></description>
      
      <content>

&lt;p&gt;There has never been a better time to become a web developer than now. The United States &lt;a href=&#34;https://www.bls.gov/ooh/computer-and-information-technology/web-developers.htm#tab-1&#34;&gt;Bureau of Labour Statistics&lt;/a&gt; predicts an increase of job postings by 15% between 2016-2026, in comparison to 7% average across all occupations. According to &lt;a href=&#34;https://www.ziprecruiter.com/Salaries/Web-Developer-Salary&#34;&gt;ZipRecruiter&lt;/a&gt; the current average salary of a Web Developer in United states is $74,080 with top 1% earning $123,000 to $133,000. Among the general specializations of web developers (front-end, back-end and full-stack); full-stack developers on avereage are paid the highest, which is logical since they have to stay up-to date on both back-end and fron-end technologies.&lt;/p&gt;

&lt;h3 id=&#34;what-kind-of-person-do-i-have-to-be-to-become-a-web-developer-in-2019&#34;&gt;What kind of person do I have to be, to become a web developer in 2019?&lt;/h3&gt;

&lt;p&gt;A person that likes to problem solve, create things, pays attention to detail and does not get frustrated easily. Do I need to be good at math? It depends. Most jobs in web development do not require any math knowledge beyond 9th grade, however people who are bettter at math tend to pick up more advanced concepts like Big Data and Machine Learning more easily. This does not mean that if you didn&amp;rsquo;t study hard sciences or computer science you cannot become a web developer; I know several talented web developers that had background in Music or the Arts for example. Do I need a degree? Not at all, but like with any training, it helps. Some big name companies may toss your resume if you don&amp;rsquo;t have a degree, but most will overlook this deficiency if you have done interesting side projects or even better, if you have experience.&lt;/p&gt;

&lt;p&gt;
    &lt;img alt=&#34;Average wages by education&#34; src=&#34;../img/becoming-a-web-developer-in-2019/general-wages-by-college-level-degrees.jpg&#34;/&gt;
    &lt;div&gt;Source: Microsoft Visual Studio Magazine&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;My experience in the industry, taught me that education is not the greatest factor in becomming a successful web developer. There are plenty of developers that have degrees and are terrible at what they do and there are plenty of developers without a degree who are legends in the field. Getting a university degree in this field will certainly be a boost, but what you do after that is really up to you. If you are passionate about learning, after 2-3 years of experience whether you have a degree or not, strarts to matter much less. &lt;strong&gt;So what are the success factors in web development?&lt;/strong&gt; Enthusiasm, grit and easy-going personality. &lt;strong&gt;Enthusiasm&lt;/strong&gt; is an obvious one; developers who keep themselves up-to-date on their own time and read about their field, tend to have broader skillsets which translate into higher salaries. &lt;strong&gt;Grit&lt;/strong&gt; is important in many fields, especially those that require prolonged periods of thought; developers who do not easily give up on a problem tend to learn more quickly, develop better mental endurance and usually progress faster in their careers. Last, but equally important, is &lt;strong&gt;personality&lt;/strong&gt;. If you are the type that does not work well with others, you may struggle in this field in the long-term. Developers who have a good personality are generally open-minded, flexible and are a pleasure to work with. They check their ego at the door and value the input and opinions of others. Listening to the opinions of others allows them to learn more quickly and co-workers tend to speak well of them, leading to promotions and salary increases. To put it simply, developers that do not think it is important to be &amp;lsquo;right&amp;rsquo; all the time, have better careers.&lt;/p&gt;

&lt;p&gt;So, if you read the above and think you have what it takes, read on.
&lt;p&gt;
    &lt;img alt=&#34;Chuck Norris approves&#34; src=&#34;../img/becoming-a-web-developer-in-2019/chuck_norris_approves.gif&#34;/&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;h3 id=&#34;choosing-what-to-learn&#34;&gt;Choosing what to learn&lt;/h3&gt;

&lt;p&gt;Noobie developers spend a bit too much time on this, decision of choice has always been a time-waster. The important thing is to start learning and doing as soon as possible. As long as you choose one of the more popular tech stacks, you should have no trouble job-wise; plus once you know one you can always switch later. To become a full-stack developer you will need to learn at least one front-end framework and one back-end framework. Back-end frameworks run on the server, talk to the database and crunch data. Front-end frameworks generate the UI and run in the browser. What are the top tech stack as of 2019 you may ask?
&lt;p&gt;
    &lt;img alt=&#34;The problem is choice&#34; src=&#34;../img/becoming-a-web-developer-in-2019/problem-is-choice.jpg&#34;/&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;h4 id=&#34;top-back-end-frameworks-from-most-recommended-to-least&#34;&gt;Top back-end frameworks (From most recommended to least)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Java based frameworks:&lt;/strong&gt; Java which runs on the Java Virtual Machine (JVM) has been around for a long time and is quite mature. It isn&amp;rsquo;t as popular as it used to be in new projects, but it has a massive foothold in the corporate world. So if you are targeting a job at the big banks or any other &lt;a href=&#34;http://fortune.com/fortune500/&#34;&gt;Fortune 500 company&lt;/a&gt;, there is a good chance they are using Java. Even though most cool kids these days are not using Java for their side projects, there are numerous hot programming languages that have been created that target JVM. This means that if you are comfortable with Java you should have no trouble transitioning to one of these newer languages. Some of these include: Scala, Kotlin and Groovy. That being said, if you decide to focus your learning on JVM supported languages, I still recommend starting with &lt;strong&gt;Java&lt;/strong&gt; because its vast community online and thorough documentation will serve you well when learning your first language. Once you have a decent grip on the language, focus on one of the popular web frameworks for Java. &lt;strong&gt;Spring&lt;/strong&gt; and &lt;strong&gt;Struts&lt;/strong&gt; are good choices.
&lt;p&gt;
    &lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/b-Cr0EWwaTk&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python with Django framework:&lt;/strong&gt; Python has one of the fastest growing communities on the internet and is considered one of the hottest languages in the industry right now. Websites like &lt;a href=&#34;https://www.instagram.com/&#34;&gt;Instagram&lt;/a&gt;, &lt;a href=&#34;https://www.pinterest.ca/&#34;&gt;Pinterest&lt;/a&gt; and &lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt; are great examples of websites running on Django. While not quite as mature as Java and C# based frameworks, Python community is very active and the open source community is very strong.&lt;/p&gt;

&lt;p&gt;
    &lt;img alt=&#34;Python&#39;s extraordinary growth&#34; src=&#34;../img/becoming-a-web-developer-in-2019/language_projections.png&#34;&gt;
    &lt;div&gt;Source: https://stackoverflow.blog/2017/09/06/incredible-growth-python/
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C# and ASP.NET Core:&lt;/strong&gt; C# which runs on the .NET Framework has been around for almost as long as Java and is a very mature platform with one of the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/&#34;&gt;best documentations&lt;/a&gt; in the industry. C# is known for its friendly community and excellent tools developed by Microsoft, which in recent years have mostly been free. ASP.NET framework has undergone a radical transformation in recent years, it has been rebuilt from scratch as ASP.NET Core and is now fully Open Source. The new framework has brought about massive performance improvements and cross-platform capabilities; thus it is recommended that ASP.NET Core is used for all new projects. C#&amp;rsquo;s popularity was held back by not embracing the Open Source community in its earlier years, but after Open Sourcing the C# compiler and more recently the .NET Framework there is plenty to get excited about. Popular website that run on ASP.NET include: &lt;a href=&#34;https://www.stackoverflow.com&#34;&gt;Stackoverflow&lt;/a&gt;, &lt;a href=&#34;https://www.marketwatch.com&#34;&gt;MarketWatch&lt;/a&gt; and &lt;a href=&#34;https://www.visualstudio.com&#34;&gt;VisualStudio.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript and Node.js+Express:&lt;/strong&gt; Javascript has been around for quite some time, mostly in the realm of the browsers, to make websites more interactive. This has changed about 10 years ago when NodeJS environment was created, which allowed JavaScript to run outside of the browser. Node.js was built on Google&amp;rsquo;s V8 JavaScript engine and changed the way developers think about JavaScript. The open source community developed numerous web frameworks which made server-side development using JavaScript significantly easier. &lt;a href=&#34;https://expressjs.com/&#34;&gt;Express&lt;/a&gt; is one of the most popular web frameworks that run on Node.js and if Node tickles your fancy I recommend starting there. Before getting started with Node.js I do recommend spending a good amount of time learning JavaScript alone and building a strong foundation there; learning curve for Node.js is quite steep for those not comfortable with JavaScript. Popular websites that run on Node.js and Express include: &lt;a href=&#34;https://myspace.com/&#34;&gt;MySpace&lt;/a&gt;, &lt;a href=&#34;https://ghost.org/&#34;&gt;Ghost CMS&lt;/a&gt; and &lt;a href=&#34;https://www.ancestry.com/&#34;&gt;Ancestry&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PHP:&lt;/strong&gt; Is a very mature language that has come a long way since its debut over a decade ago. It is not known to be a very elegant programming language, but it is very easy to pick up and the online community is absolutely massive. Historically PHP web-frameworks have not been known to be very performant, but this has changed in 2015 with the release of PHP 7, which essentially doubled its performance. Recent benchmarks show that PHP 7.X.X is on par with Node.js in requests served per second. Currently, it appears that the PHP community is here to stay and with giants like Wordpress and Yahoo using it, support will be around for a long time. &lt;a href=&#34;https://laravel.com/&#34;&gt;Laravel&lt;/a&gt; and &lt;a href=&#34;http://www.zend.com/&#34;&gt;Zend&lt;/a&gt; are popular web-frameworks that use PHP and either one will serve you well if you choose to go down the PHP path.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ruby on Rails:&lt;/strong&gt; Ruby on Rails web framework which uses Ruby as its programming language, is a perfect example of a technology that imploded and fell behind. On the surface Ruby is a fantastic language, it is known for being very readable, easy to understand and easy to write. Unfortunately, there are some aspects of Ruby on Rails framework that reduced its adoption significantly. First, its very opinionated community has lost many of its significant open source contributors. Second, its mediocre performance is significantly behind any of the web frameworks listed above. It was for this reason Twitter, has moved away from Ruby on Rails to Java/Scala. Similarly, linkedIn also moved away from Ruby on Rails and on to Node.js. Unless, you already have an offer ready for a job using Ruby on Rails, I do not recommend starting with this framework in 2019.
&lt;p&gt;
    &lt;img alt=&#34;Ruby on Rails is dying&#34; src=&#34;../img/becoming-a-web-developer-in-2019/ruby-on-rails-trends.jpg&#34;/&gt;
    &lt;div&gt;Source: &lt;a href=&#34;https://naturaily.com/blog/who-gives-f-about-rails&#34;&gt;https://naturaily.com/blog/who-gives-f-about-rails&lt;/a&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Metric&lt;/th&gt;
&lt;th&gt;Java&lt;/th&gt;
&lt;th&gt;Python&lt;/th&gt;
&lt;th&gt;C#&lt;/th&gt;
&lt;th&gt;Node.js&lt;/th&gt;
&lt;th&gt;PHP&lt;/th&gt;
&lt;th&gt;Ruby on Rails&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Jobs on Indeed (New York State)&lt;/td&gt;
&lt;td&gt;1649&lt;/td&gt;
&lt;td&gt;1736&lt;/td&gt;
&lt;td&gt;1174&lt;/td&gt;
&lt;td&gt;488&lt;/td&gt;
&lt;td&gt;662&lt;/td&gt;
&lt;td&gt;180&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Jobs on LinkedIn (New York State)&lt;/td&gt;
&lt;td&gt;1000+&lt;/td&gt;
&lt;td&gt;495&lt;/td&gt;
&lt;td&gt;553&lt;/td&gt;
&lt;td&gt;1000+&lt;/td&gt;
&lt;td&gt;464&lt;/td&gt;
&lt;td&gt;62&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Jobs on Indeed (Hong Kong)&lt;/td&gt;
&lt;td&gt;903&lt;/td&gt;
&lt;td&gt;358&lt;/td&gt;
&lt;td&gt;328&lt;/td&gt;
&lt;td&gt;192&lt;/td&gt;
&lt;td&gt;423&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Jobs on LinkedIn (Hong Kong)&lt;/td&gt;
&lt;td&gt;73&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;116&lt;/td&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;top-front-end-frameworks-from-most-recommended-to-least&#34;&gt;Top front-end frameworks (from most recommended to least)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;React:&lt;/strong&gt; In the world of front-end, having React on your resume is the best you can do for yourself. When React first came out it was very fast, and over time it became even faster. Newer versions of React have added innovative ways of caching and lazy-loading features and it looks like TypeScript is gaining adoption in the React community as well; it&amp;rsquo;s safe to say React has matured vary well and is here to stay. Unfortunately, React is not the easiest front-end framework to learn, especially if it is your first. React uses JSX syntax out of the box, which can be awkward for newbies because it mixes javascript with html-like syntax. The React community can be somewhat devided on best practices, so don&amp;rsquo;t be surprised when one tutorial recommends a pattern or library that another tutorial does not follow. React&amp;rsquo;s flexibility can be a gift and a curse while learning, but this flexibility is also what most developers love about this framework. React is an open sourced framework backed by Facebook, with a very active cummunity of about 1300 contributors on Github at the time of writing. Companies that use React include &lt;strong&gt;Facebook&lt;/strong&gt;, &lt;strong&gt;Instagram&lt;/strong&gt; and &lt;strong&gt;Netflix&lt;/strong&gt; among others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angular:&lt;/strong&gt; There was a time not long ago, when Angular was the coolest thing on the technological block. React definitely took over the top spot, but Angular still has a large, active community of 935 contributors on Github. It was the first framework to embrace TypeScript and it is well regarded in the corporate world. Angular&amp;rsquo;s approach is more strict than React&amp;rsquo;s, it has a specific and maybe &amp;ldquo;opinionated&amp;rdquo; way of developing, which can be gift and a curse. Some developers agree that Angular framework is somewhat over-engineered in comparison to React and especially Vue.js. Be wary of the older angular.js (note the js in the name), which refers to the first version of Angular which is vastly different from Angular 2 and up. Companies that use this framework include &lt;strong&gt;BMW&lt;/strong&gt;, &lt;strong&gt;ETrade&lt;/strong&gt;, &lt;strong&gt;Wix&lt;/strong&gt; and &lt;strong&gt;VmWare&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vue.js:&lt;/strong&gt; This is my favorite framework, so I may be biased. I really like the minimalistic syntax of Vue.js, it is one of the most performant JS frameworks currently available and it&amp;rsquo;s also the lightest in terms of Kilobyte footprint. It was created by a former employee of Google, who wanted to take the best parts of the existing frameworks and combine them in a minimalistic form. In terms of popularity, Vue.js is still no where near Angular or React, but it is climbing fast. Its growth has been especially impressive Asia, where companies like &lt;strong&gt;Alibaba&lt;/strong&gt;, &lt;strong&gt;Baidu&lt;/strong&gt; and &lt;strong&gt;Expedia&lt;/strong&gt; are making use of this framework. If getting a job as soon as possible is a priority for you, I would still recommend learning Angular or React first. If landing a hip job at a startup is a priority for you, then Vue.js will make you stand out. Vue.js currently has 275 contributors on Github.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Metric&lt;/th&gt;
&lt;th&gt;React&lt;/th&gt;
&lt;th&gt;Angular&lt;/th&gt;
&lt;th&gt;Vue.js&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Release&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;KB Footprint&lt;/td&gt;
&lt;td&gt;133 KB&lt;/td&gt;
&lt;td&gt;566 KB&lt;/td&gt;
&lt;td&gt;59 KB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GitHub Contributors&lt;/td&gt;
&lt;td&gt;1300&lt;/td&gt;
&lt;td&gt;935&lt;/td&gt;
&lt;td&gt;275&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Jobs on Indeed (New York State)&lt;/td&gt;
&lt;td&gt;1037&lt;/td&gt;
&lt;td&gt;747&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Jobs on LinkedIn (New York State)&lt;/td&gt;
&lt;td&gt;1000+&lt;/td&gt;
&lt;td&gt;1000+&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Jobs on Indeed (Hong Kong)&lt;/td&gt;
&lt;td&gt;282&lt;/td&gt;
&lt;td&gt;184&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Jobs on LinkedIn (Hong Kong)&lt;/td&gt;
&lt;td&gt;57&lt;/td&gt;
&lt;td&gt;119&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
    &lt;img alt=&#34;Trends of major js frameworks&#34; src=&#34;../img/becoming-a-web-developer-in-2019/js_framework_trend.PNG&#34;&gt;
    &lt;div&gt; Source: Google Trends&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;so-i-picked-my-learning-path-now-what&#34;&gt;So, I picked my learning path, now what?&lt;/h3&gt;

&lt;p&gt;There are many ways you can hone your skills, but to get an interview you will need to put in some time. If you think the &lt;strong&gt;todo&lt;/strong&gt; list you created from a tutorial is going to be enough, I doubt it. Pick the technology stack you are best at and build something I wouldn&amp;rsquo;t find in tutorial sites. To prove to me that you know something, you need to be able to create something on your own, not reproduce something from a guide. The best way to do this is to pick an idea on your own and create it; be wary that you are still new, so don&amp;rsquo;t pick the next stock market trading platform as your idea. Pick something challenging but doable within a week or two or three; a recipe website that stores recipies in the database and allows image uploading would be a good start, or maybe a repository of all the basketball players in the NBA with adding and sorting capabilities.&lt;/p&gt;

&lt;p&gt;To get any entry-level web dev position most interviewers are interested in seeing that you can create some sort of CRUD (Create, Read, Update and Delete) application. This demonstrated that you have some basic knowledge of a back-end technology and most likely some knowledge of databases. If you can throw in React or Angular or Vue on the front-end, they will really be impressed. So, if you can demonstrate these things in your pet application and be able to explain how you did it (to make sure that your wiz-dev uncle didn&amp;rsquo;t do it for you) you have a solid chance of getting an interview.&lt;/p&gt;

&lt;p&gt;Obviously, the more you can show the better, but a pet project that demonstrates what you are capable of will go a long way, and as a bonus will sharpen your skillset as well. Another tip I can give you, is to spend a few days and make a good resume. You won&amp;rsquo;t have too much to put at this point of your career, but mentioning your pet projects while providing your github account as proof, as well as listing the online courses and learning websites you have used, will help. The point of your resume at this stage is to demonstrate your enthusiasm on paper, any experienced developer or technical manager will see where you are as a developer. What they want to see, is not who you are right now, but who you are going to be.&lt;/p&gt;

&lt;p&gt;Lastly, make sure you can explain any technical terms you have mentioned on your resume. You won&amp;rsquo;t believe how many people I have interviewed that mentioned MVC for example, and when esked to explain what it is, couldn&amp;rsquo;t, at all. For a junior developer position, the interviewer is not looking for anything in depth, but if you cannot explain something you have mentioned four times in your resume, you are likely to have a very short interview.&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://www.eventslooped.com/about-me/</link>
      <pubDate>Sun, 05 May 2019 17:43:12 +0700</pubDate>
      <author>Ilya Nemtsev</author>
      <guid>https://www.eventslooped.com/about-me/</guid>
      <description></description>
      
      <content>&lt;p&gt;My name is Ilya, and I am a Full Stack Software Engineer working in Bangkok, Thailand. I grew up in Canada, and I completed my Undergraduate studies in Applied Mathematics. I am a completely self-taught programmer and I am still hungry for more. Hopefully you find something interesting in my blog posts.&lt;/p&gt;

&lt;p&gt;
    &lt;img alt=&#34;Me in Bangkok, Thailand&#34; src=&#34;../posts/img/about-me/self-in-thailand.jpg&#34;&gt;
&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Typescript and its future</title>
      <link>https://www.eventslooped.com/posts/typescript-future/</link>
      <pubDate>Sat, 27 Apr 2019 17:21:11 +0700</pubDate>
      <author>Ilya Nemtsev</author>
      <guid>https://www.eventslooped.com/posts/typescript-future/</guid>
      <description></description>
      
      <content>

&lt;p&gt;Before Angular team decided to turn the its community upside down with the release of Angular 2 in 2016, I did not think Typescript would take off beyond a small loyal group. Having been developed internally my Microsoft, the open source community was wary. But then, the unlikely thing happened, Microsoft and Google joined forces to create Angular (2&amp;hellip;) with TypeScript support out of the box. By default.&lt;/p&gt;

&lt;p&gt;You can imagine this gave TypeScript a strong boost in popularity.
&lt;p&gt;
    &lt;img alt=&#34;Typescript, 5 year trend&#34; src=&#34;../img/typescript-future/typescript-trend.png&#34; style=&#34;width:600px; display: block; padding: {{ .params.imgpad }}&#34;&gt;
    &lt;div&gt;Source: Google Trends for TypeScript&lt;/div&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Angular received some initial backlash from the drastic changes that were introduced, not just due to Typescript, but also from drastic changes in syntax. The initial disappointment of AngularJS fans overshadowed the drastic improvements in performance and new features like Dependency Injection and Lazy Loading of components.
&lt;p&gt;
    &lt;img alt=&#34;Angular, 5 year trend&#34; src=&#34;../img/typescript-future/angular-trend.png&#34; style=&#34;width:600px; display: block; padding: {{ .params.imgpad }}&#34;&gt;
    &lt;div&gt;Source: Google Trends for Angular&lt;/div&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;And yet, Angular survived and is doing quite well. This was helped in part by the oncoming pressure from Javascript ES2015/ES6, developers had to learn new things and learn they did.&lt;/p&gt;

&lt;h3 id=&#34;making-the-hard-choice&#34;&gt;Making the hard choice&lt;/h3&gt;

&lt;p&gt;So, which should you choose? Like with every other question in technology, it depends.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Browser support&lt;/strong&gt;: TypeScript is not supported by any browser out there, thus a transpiler has to be used to transpile the code into JavaScript ES5. Seems like an extra step right? Well, it looks like ES6 suffers from the same problem. As of writing, the marketshare of browsers that support ES6 well is not great enough to use ES6 in production, thus you guessed it, a transpiler still has to be used. Therefore the browser support point is moot.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;To Type or not to Type&lt;/strong&gt;: That is the question? This point will probably make up most of your decision making. This is where I think TypeScript truly shines. Typed code while slightly more verbose, results in code that is far less error prone. Having strict types allows the compiler to notify the developer of any type mismatching and other type related problems during development, instead of during testing. In addition, web development IDEs like &lt;a href=&#34;https://www.jetbrains.com/webstorm/&#34;&gt;WebStorm&lt;/a&gt; and &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VS Code&lt;/a&gt; among others, have excellent plugins and autocomplete capabilities that are far better than those for vanilla javascript.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Future of TypeScript&lt;/strong&gt;: Another extremely important factor to consider, when choosing a technology is its future. Anyone with a few years of professional experience knows how painful it is to use a library or technology that is no longer supported and there are still bugs that need to be fixed. Thankfully, TypeScript is not one of those cases. Adoption of types is only increasing (so if you thought of not learning TypeScript because it will never take off, down a quality Lagger and go learn it). As of writing, the upcoming and increasingly popular VueJS is already supporting TypeScript via its CLI, but is promising to significantly improve TypeScript integration with Class Based components and TSX support upon the next major release 3.x. Angular and React already have excellent support for TypeScript, so why pass on it?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Why you may not want TypeScript&lt;/strong&gt;: You think this will convert your back-end developers into front-end developers, or better yet full-stack! It won&amp;rsquo;t. Understanding Javascript concepts and its nuances is still very important.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you still aren&amp;rsquo;t sold on adding TypeScript to your arsenal, consider the opinions of many via &lt;a href=&#34;https://insights.stackoverflow.com/survey/2018#most-loved-dreaded-and-wanted&#34;&gt;2018 StackOverflow Annual Survey&lt;/a&gt; where TypeScript was rated #4 most loved programming language.&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Hugo Blog on Azure</title>
      <link>https://www.eventslooped.com/posts/hugo-blog-on-azure/</link>
      <pubDate>Sun, 09 Dec 2018 15:51:09 -0500</pubDate>
      <author>Ilya Nemtsev</author>
      <guid>https://www.eventslooped.com/posts/hugo-blog-on-azure/</guid>
      <description></description>
      
      <content>

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;I decided to give blogging a try. I setup the most cost-effective solution I could come up with; static-html hosting on cloud blob-storage.&lt;/p&gt;

&lt;p&gt;Initially I tried using Jekyll to generate my static pages, but due to the clunky tooling available (especially on Windows) I looked for other solutions. That is when I found &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;. They have great documentation, modern CLI and great tooling, regardless of your OS preference.&lt;/p&gt;

&lt;p&gt;Since I already have a Microsoft Azure account, I decided to host my static files there. Here is how I set-up my blog, from Hugo installation on Windows to publishing to the cloud.&lt;/p&gt;

&lt;h3 id=&#34;install-hugo-on-windows&#34;&gt;Install Hugo on Windows&lt;/h3&gt;

&lt;p&gt;The easiest way to install Hugo is through a package manager called &lt;a href=&#34;https://chocolatey.org/install&#34;&gt;Chocolatey&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once chocolatey is installed, run the following at command line/Powershell:
&amp;gt; choco install hugo -confirm&lt;/p&gt;

&lt;p&gt;Voila! Installation is complete.&lt;/p&gt;

&lt;h3 id=&#34;setup-a-basic-blog&#34;&gt;Setup a basic blog&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create an easy to find folder for your blogs, let&amp;rsquo;s say &lt;em&gt;C:/blogs&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Run the below command, this will create a blog in the folder hugo_blog
&amp;gt; hugo new site hugo_blog&lt;/li&gt;
&lt;li&gt;Now you need to get a theme for your blog, &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;https://themes.gohugo.io/&lt;/a&gt; has some solid options. Each theme has a github page with instructions on how to install.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Once, your theme files are in your hugo_blog/themes/&amp;hellip; and your &lt;strong&gt;config.toml&lt;/strong&gt; has been updated, time to create your first post by going to your hugo_blog directory and running the command
&amp;gt; hugo new posts/my-first-cool-post.md
Be sure to have the extension, otherwise you will have problems rendering that page. If you forgot go to &lt;em&gt;&amp;hellip;hugo_blog\content\posts&lt;/em&gt; and delete the generated file here and try again. Do not try to rename the file and adding the extension, as this will not work.&lt;/li&gt;
&lt;li&gt;You can now edit my-first-cool-post.md if you like. To test run your generated blog, go to your blog root &lt;strong&gt;hugo_blog&lt;/strong&gt; and run the command
&amp;gt; hugo server -D
If you did everything correctly you should now be able to view your blog locally by going to: &lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;setup-azure-storage&#34;&gt;Setup Azure Storage&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;After signing up for Microsoft Azure, search for &lt;strong&gt;storage account&lt;/strong&gt; if you haven&amp;rsquo;t set it up already and click &lt;strong&gt;Add&lt;/strong&gt;.
&lt;p&gt;&lt;img alt=&#34;Search for Storage Account&#34; src=&#34;../img/hugo-blog-on-azure/storage_account.png&#34; style=&#34;width: 650px; display: block; padding: {{ .Params.imgpad }}&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Fill out the configuration with your desired names, and with these settings.
&lt;p&gt;&lt;img alt=&#34;Storage Account Configuration&#34; src=&#34;../img/hugo-blog-on-azure/create_storage_acc_1.png&#34;  style=&#34;width: 650px; display: block; padding: {{ .Params.imgpad }}&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;After creating the storage account, open it and navigate to &lt;strong&gt;Static Website&lt;/strong&gt;* under Settings. &lt;strong&gt;Primary endpoint&lt;/strong&gt; is how you will access your published blog (for now). Make sure to add &lt;strong&gt;index.html&lt;/strong&gt; to your &lt;strong&gt;index document name&lt;/strong&gt; field, to establish your website&amp;rsquo;s entry point.
&lt;p&gt;&lt;img alt=&#34;Setup static website&#34; src=&#34;../img/hugo-blog-on-azure/create_storage_acc_2.png&#34; style=&#34;width:500px; display: block; padding: {{ .Params.imgpad }}&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;publish-to-azure-using-vs-code-azure-storage-extension&#34;&gt;Publish to Azure using VS Code + Azure Storage Extension&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;To get a compiled, release version of your blog, run the simple command below. This will generate a static html version of your blog into the &lt;strong&gt;public&lt;/strong&gt; folder at the root of your blog
&amp;gt; hugo&lt;/li&gt;
&lt;li&gt;I use Visual Studio Code daily, as it is one of the cleanest IDEs for Front-end development. But if you do not yet use it, you can download it &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Once installed, click on Extensions (lowest icon on the left), search for Azure Storage, hit install and restart VS Code
&lt;p&gt;&lt;img alt=&#34;VS Code Azure Storage Extension&#34; src=&#34;../img/hugo-blog-on-azure/storage_extension.png&#34; style=&#34;width: 500px; display: block; padding: {{ .Params.imgpad }}&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Now you have a cool new Azure icon below the extensions one. Click on it, select login and follow the instructions. Once you put in the code, you should be able to see your storage account through VS Code.&lt;/li&gt;
&lt;li&gt;Open the folder &amp;hellip;hugo_blog/public in VS Code&lt;/li&gt;
&lt;li&gt;In VS Code Explorer (top icon on the left), assumming your are at root level of your blog, right click and select &lt;strong&gt;Deploy to Static Website&lt;/strong&gt;.
&lt;p&gt;&lt;img alt=&#34;Deploy to Static Website&#34; src=&#34;../img/hugo-blog-on-azure/azure_storage_deploy.png&#34; style=&#34;width: 500px; display:block; padding: {{ .Params.imgpad }}&#34;/&gt;&lt;/p&gt;
At this point you will be prompted to select your subscription and azure storage account
&lt;p&gt;&lt;img alt=&#34;Select your storage account&#34; src=&#34;../img/hugo-blog-on-azure/azure_storage_deploy1.png&#34; style=&#34;width: 500px; display: block; padding: {{ .Params.imgpad }}&#34;/&gt;&lt;/p&gt;
You should get a success message in a few seconds
&lt;p&gt;&lt;img alt=&#34;Successful deployment&#34; src=&#34;../img/hugo-blog-on-azure/azure_storage_deploy2.png&#34; style=&#34;width: 500px; display:block; padding: {{ .Params.imgpad }}&#34;/&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You are good to go! Keep adding pages and deploying in the same way :)&lt;/p&gt;
</content>
      
    </item>
    
  </channel>
</rss>